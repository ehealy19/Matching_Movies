<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE article PUBLIC "-//NLM//DTD JATS (Z39.96) Journal Archiving
and Interchange DTD v1.2 20190208//EN" "JATS-archivearticle1.dtd">
<article xmlns:mml="http://www.w3.org/1998/Math/MathML" xmlns:xlink="http://www.w3.org/1999/xlink" dtd-version="1.2" article-type="other">
  <front>
    <journal-meta>
      <journal-id/>
      <journal-title-group>
        <journal-title>Film Data Science</journal-title>
      </journal-title-group>
      <issn/>
      <publisher>
        <publisher-name/>
      </publisher>
    </journal-meta>
    <article-meta>
      <title-group>
        <article-title>Leading Ladies and Lost Revenue: A Causal Analysis of
Female Representation and Box-Office Returns</article-title>
      </title-group>
      <contrib-group>
        <contrib contrib-type="author" corresp="yes">
          <name>
            <surname>Healy</surname>
            <given-names>Lizzie</given-names>
          </name>
          <string-name>Lizzie Healy</string-name>
          <email>emh201@georgetown.com</email>
          <role>Project Designer</role>
          <role>Data Collector</role>
          <role>Methodologist</role>
          <role>Analyst</role>
          <role vocab="https://credit.niso.org" vocab-term="visualization" vocab-term-identifier="https://credit.niso.org/contributor-roles/visualization/">Visualization</role>
          <xref ref-type="aff" rid="aff-1">a</xref>
          <xref ref-type="corresp" rid="cor-1">*</xref>
        </contrib>
      </contrib-group>
      <aff id="aff-1">
        <institution-wrap>
          <institution>Georgetown University</institution>
        </institution-wrap>
      </aff>
      <author-notes>
        <corresp id="cor-1">emh201@georgetown.com</corresp>
      </author-notes>
      <pub-date date-type="pub" publication-format="electronic" iso-8601-date="2025-08-11">
        <year>2025</year>
        <month>8</month>
        <day>11</day>
      </pub-date>
      <history/>
      <abstract>
        <p>This work will investigate the impact of gender bias in the film
industry pertaining to economic outcomes. Specifically, it will
establish a causal link between a film casting a female actress in the
leading role and the resulting box-office revenue. This will be
accomplished utilizing propensity weighting, which will match movies
based on the perceived similarity of their characteristics. These
predictor variables will include the year, month of release, genre,
runtime, director and writers, star power level of the cast, MPAA
rating, country of release, language, film description, the production
budget, the country of release, production companies, and tagline. To
deal with the variables that are non-numeric the following steps will be
taken. Firstly, a manufactured metric will be created to capture the
preceived ‘starpower’ of the actors/actresses. Secondly, a sentiment
analysis will be performed on the film description and tagline. The
primary outcome variable will be the box-office number measured in US
dollars, measured as the gross value worldwide. The IMDb score will be
employed as an additional outcome measure to be used as a robustness
check. The initial hypothesis is that films that opt to feature a female
in the leading role will experience a decrease value in the box-office
revenue.</p>
      </abstract>
      <kwd-group kwd-group-type="author">
        <kwd>Films</kwd>
        <kwd>Gender Equality</kwd>
        <kwd>Economics</kwd>
      </kwd-group>
    </article-meta>
  </front>
  <body>
    <sec id="introduction">
      <title>1 Introduction</title>
      <p>The film industry has been a dominant force in United States
  entertainment since cinema became a popular pastime in the 1930s and
  1940s
  (<xref alt="National Science and Media Museum 2020" rid="ref-science_cinema_history" ref-type="bibr">National
  Science and Media Museum 2020</xref>). Today, it remains an extremely
  lucrative business, to the tune of approximately $77 billion annually
  (<xref alt="Statista n.d." rid="ref-statista_film" ref-type="bibr">Statista
  n.d.</xref>). This enduring profitability has attracted filmmakers,
  production companies, economists, and film enthusiasts alike, all
  seeking to understand what drives the success of a film. Some highly
  anticipated films, backed by a compelling storyline, a star-studded
  cast, and a substantial production budget, go on to dominate the box
  office and sweep critical awards, while others flop on opening weekend
  and struggle to recoup their investment. So, what makes a movie
  successful? Is there some magic formula, or are there specific
  pre-production factors that drive revenue? These questions remain
  unanswered, but in the century since the dawn of film, research-backed
  theories have begun to emerge.</p>
      <p>As a first attempt at providing one such theory, my previous paper,
  <ext-link ext-link-type="uri" xlink:href="./assets/thesis.pdf">Behind
  the Box Office: Directorial Influence on Film Revenue in the United
  States Entertainment Industry</ext-link> attempted to analyze the link
  between director quality and the box-office success of a film. The
  paper created two novel measures of director quality: a summation of
  all box-office revenue earned by the director’s films and the
  accumulated number of critical awards from the fifteen years leading
  up to the film in question. The main dependent variable was domestic
  box-office revenue, and a robustness check was implemented, changing
  the dependent variable to the IMDb rating earned.</p>
      <fig id="tbl-1">
        <caption>
          <p>Table 1: Directorial Effect on Domestic Gross with
    Director Controls</p>
        </caption>
        <graphic mimetype="image" mime-subtype="png" xlink:href="./assets/thesis_table1.png"/>
      </fig>
      <fig id="tbl-2">
        <caption>
          <p>Table 2: Directorial Effect on IMDb Rating with Director
    Controls</p>
        </caption>
        <graphic mimetype="image" mime-subtype="png" xlink:href="./assets/thesis_table2.png"/>
      </fig>
      <p>The paper found that an increase in director financial quality
  yielded between a 0.0289% and 0.0307% increase in domestic gross and
  no impact on IMDb rating. Conversely, director quality in terms of
  critical acclaim yielded no significant impact on domestic gross, but
  between 0.01803 and 0.0270 point increase in IMDb rating. The paper
  also discovered a statistically significant decrease in domestic gross
  for female directors as compared to male directors outlined in
  <xref alt="Table 1" rid="tbl-1">Table 1</xref> and
  <xref alt="Table 2" rid="tbl-2">Table 2</xref>.</p>
      <p>Overall, the results were thought-provoking; however, the
  methodology used was lacking in the causality department. The
  research, if anything, worked towards establishing a weak association
  due to its statistical analysis going only so far as a simple
  ordinary-least-squares regression and controlling for confounding
  variables. While the variables were considered and included in the
  regression equation, they were all treated equally as controls; thus,
  a more complex analysis is warranted.</p>
      <p>Moving forward, the work to get to causality includes introducing
  causal methods for handling covariates instead of just controlling for
  them. Furthermore, I wanted to investigate the conclusion of gender
  bias further and shifted this analysis to examine actors instead of
  directors.</p>
      <p>Thus, this paper will investigate the impact of gender bias in the
  film industry pertaining to economic outcomes. Specifically, it will
  attempt to establish a causal link between a film casting a female
  actress in the leading role and the resulting box-office revenue by
  employing propensity score matching.</p>
      <p>Data collection and preparation are discussed in
  <xref alt="Section 2" rid="sec-data">Section 2</xref>. Methodology,
  manufactured variables, and propensity scoring are discussed in
  <xref alt="Section 3" rid="sec-meth">Section 3</xref>. Results and
  analysis are presented in
  <xref alt="Section 4" rid="sec-results">Section 4</xref>. Results are
  discussed in <xref alt="Section 5" rid="sec-discuss">Section 5</xref>.
  Concluding remarks, limitations, and future work are discussed in
  <xref alt="Section 6" rid="sec-conclusion">Section 6</xref>.</p>
    </sec>
    <sec id="sec-data">
      <title>2 Data</title>
      <p>The data for this research was collected from two separate sources:
  <ext-link ext-link-type="uri" xlink:href="https://www.omdbapi.com/">Open
  Movie Database (OMDb)</ext-link> and
  <ext-link ext-link-type="uri" xlink:href="https://www.themoviedb.org/">The
  Movie Database (TMDb)</ext-link>. Both are sources for movie and
  television metadata, differing only in their sourcing and specific
  variables provided. OMDb partly sources from Amazon’s Internet Movie
  Database (IMDb) and then relies on crowdsourcing for missing data,
  while TMDb is independently created and relies solely on crowdsourcing
  from its community of film buffs to provide data entry for films. Both
  of these sources offer an API that allowed for the collection of movie
  metadata, which was then merged using an inner join on the film Title
  and resulted in the following variables: <monospace>Title</monospace>,
  <monospace>Year</monospace>, <monospace>Runtime</monospace>,
  <monospace>Budget</monospace>, <monospace>Released</monospace>,
  <monospace>Genre</monospace> (Action, Adventure, Animation, Biography,
  Comedy, Crime, Documentary, Drama, Family, Fantasy, Film Noir,
  History, Horror, Music, Musical, Mystery, Romance, Sci-Fi, Sport,
  Thriller, War, Western), <monospace>MPAA Rating</monospace> (G, GP, M,
  M/PG, NC-17, Not-Rated, PG, PG-13, R, TV-MA, Unrated, Accepted),
  <monospace>Production Companies</monospace>,
  <monospace>Director</monospace>, <monospace>Writer</monospace>,
  <monospace>Country</monospace>, <monospace>Language</monospace>,
  <monospace>Description</monospace>, <monospace>Tagline</monospace>,
  <monospace>Overview</monospace>, <monospace>Actors</monospace>,
  <monospace>Box Office</monospace>, <monospace>Revenue</monospace>,
  <monospace>IMDb Rating</monospace>, <monospace>Metascore</monospace>,
  <monospace>IMDb Votes</monospace>, <monospace>TMDb rating</monospace>,
  <monospace>Vote Count</monospace>, <monospace>Awards</monospace>, and
  <monospace>Poster URL</monospace>.</p>
      <p>With this combined dataset, some further preparation was required
  to move forward with the analysis. Firstly, some variables were
  dropped as they were deemed unimportant, while others were very
  similar across the datasets; for example, only the ‘Description’ was
  kept, and the ‘Overview’ variable was dropped. All missing and zero
  values in numerical variables were removed, and each of the variables
  was converted to the correct data type. The ‘Released’ date was split
  into three variables for the month, day, and year. For the categorical
  variables, two different techniques were utilized. For ‘Genre’ and
  ‘MPAA rating’, a one-hot encoding was applied. However, for the
  ‘Language’ and ‘Country’ only the first observation of each was kept,
  which was then categorized simply as either English or other language,
  and domestic (for the US) and international for all other
  countries.</p>
      <p>The final dataset included a total of 2,816 films with 61 columns
  of variables.</p>
      <fig id="tbl-3">
        <caption>
          <p>Table 3: Summary Statistics of Numerical
    Variables</p>
        </caption>
        <table-wrap>
          <table>
            <thead>
              <tr>
                <th>Variable</th>
                <th>Minimum</th>
                <th>Maximum</th>
              </tr>
            </thead>
            <tbody>
              <tr>
                <td>Box Office</td>
                <td>3,622</td>
                <td>858,373,000</td>
              </tr>
              <tr>
                <td>Budget</td>
                <td>7,000</td>
                <td>460,000,000</td>
              </tr>
              <tr>
                <td>Runtime</td>
                <td>63</td>
                <td>238</td>
              </tr>
              <tr>
                <td>IMDb Rating</td>
                <td>1.9</td>
                <td>9.3</td>
              </tr>
              <tr>
                <td>IMDb Votes</td>
                <td>1,672</td>
                <td>3,059,994</td>
              </tr>
            </tbody>
          </table>
        </table-wrap>
      </fig>
      <p>The IMDb Rating, which is a score given by the Internet Movie
  Database, takes ratings given by IMDb users and aggregates them to
  generate a single rating from 0 to 10 for each film, with 10
  indicating a perfect film and 0 indicating the worst possible film. In
  this dataset, the lowest rating given was a 1.9, while the highest
  rating was a 9.3, and the average was around a 6.6 rating. As shown in
  <xref alt="Figure 2" rid="fig-2">Figure 2</xref>, there is a clear
  decline in the average IMDb Rating over the years, beginning around
  1970 and flattening out over the last 20 or so years.</p>
      <fig id="fig-1">
        <caption>
          <p>Figure 1: IMDb Rating Distribution</p>
        </caption>
        <graphic mimetype="image" mime-subtype="png" xlink:href="./notebooks/notebook_output/imdb_rating.png"/>
      </fig>
      <fig id="fig-2">
        <caption>
          <p>Figure 2: IMDb Ratings over the Years</p>
        </caption>
        <graphic mimetype="image" mime-subtype="png" xlink:href="./notebooks/notebook_output/imdb_overtime.png"/>
      </fig>
      <p>The Box Office value is the total revenue earned by the film from
  ticket sales for the film’s release in theatres only. This metric is
  often utilized in entertainment economics literature as a proxy for
  the success of the film. This number boosts a mean of around 73.5
  million. As shown in <xref alt="Figure 3" rid="fig-3">Figure 3</xref>,
  unlike the IMDb rating, the box office has seen a general increasing
  trend over the years since 1970, except for 2020 when theatres were
  closed due to COVID-19.</p>
      <fig id="fig-3">
        <caption>
          <p>Figure 3: Box-Office Revenue over the
    Years</p>
        </caption>
        <graphic mimetype="image" mime-subtype="png" xlink:href="./notebooks/notebook_output/boxoffice_overtime.png"/>
      </fig>
      <p>When looking at the categorizations of the films, we see that most
  fall into the genres of drama, comedy, action, and adventure and have
  an MPAA rating of R, PG-13, or G
  (<xref alt="Figure 4" rid="fig-4">Figure 4</xref> and
  <xref alt="Figure 5" rid="fig-5">Figure 5</xref>).</p>
      <fig id="fig-4">
        <caption>
          <p>Figure 4: Distribution of Film Genres</p>
        </caption>
        <graphic mimetype="image" mime-subtype="png" xlink:href="./notebooks/notebook_output/genre_counts.png"/>
      </fig>
      <fig id="fig-5">
        <caption>
          <p>Figure 5: Percentage of Film MPAAs Ratings</p>
        </caption>
        <graphic mimetype="image" mime-subtype="png" xlink:href="./notebooks/notebook_output/mpaa_pie.png"/>
      </fig>
    </sec>
    <sec id="sec-meth">
      <title>3 Methodology</title>
      <sec id="manufactured-variables">
        <title>3.1 Manufactured Variables</title>
        <sec id="top-directors-writers-production-companies">
          <title>3.1.1 Top Directors, Writers, Production Companies</title>
          <p>In order to incorporate the level of expertise of the team
      creating the film, this analysis worked to categorize the level of
      directors, writers, and production companies. All of these were
      attempting to better match movies based on the level of effort put
      into its creation in terms of money, knowledge, experience, and
      previous success. To achieve this, three lists were collected that
      detailed the top directors, writers, and production companies:</p>
          <p>“IMDb List: Top 25 Greatest Directors of All Time”
      (<xref alt="n.d." rid="ref-imdb_top_directors" ref-type="bibr">n.d.</xref>)
      “IMDb List: Top 20 Greatest Screenwriters of All Time”
      (<xref alt="n.d." rid="ref-imdb_top_writers" ref-type="bibr">n.d.</xref>)
      “Production Companies Overview”
      (<xref alt="n.d." rid="ref-the_numbers_production_companies" ref-type="bibr">n.d.</xref>)</p>
          <p>The directors and writers were judged on a combination of their
      perceived skill and their lifetime achievement in terms of awards
      and accolades. The production companies were compiled simply based
      on the total domestic box-office revenue amassed across all films
      they have produced.</p>
          <p>The director, writer, and production company variables were
      then referenced against these lists, receiving a 1 if the entity
      was mentioned in the list and a 0 otherwise, resulting in three
      one-hot encoded variables: <monospace>Top_Production</monospace>,
      <monospace>Top_Director</monospace>, and
      <monospace>Top_Writer</monospace>. For the sake of simplicity, if
      more than one entity was listed for any of these variables, only
      the first entity was taken into account.</p>
        </sec>
        <sec id="tagline-and-description-sentiment-analysis">
          <title>3.1.2 Tagline and Description Sentiment Analysis</title>
          <p>In order to extract meaningful value from the film description
      and tagline, sentiment analysis was performed on the text. This
      sentiment analysis was performed by an off-the-shelf pre-trained
      model publicly available on Hugging Face Face
      (<xref alt="n.d." rid="ref-distilbert_sst2_hf" ref-type="bibr">n.d.</xref>)
      . This model was trained on English text specifically for binary
      text classification and achieved a high accuracy score. The result
      is two variables with a binary value of 1 for positive sentiment
      or 0 for negative sentiment of both the film description and film
      tagline.</p>
          <fig id="tbl-4">
            <caption>
              <p>Table 4: Example of the Tagline Sentiment
        Values</p>
            </caption>
            <table-wrap>
              <table>
                <colgroup>
                  <col width="30%"/>
                  <col width="29%"/>
                  <col width="25%"/>
                  <col width="16%"/>
                </colgroup>
                <thead>
                  <tr>
                    <th>Title</th>
                    <th>Tagline</th>
                    <th>Tagline Sentiment</th>
                    <th/>
                  </tr>
                </thead>
                <tbody>
                  <tr>
                    <td>Surf’s Up</td>
                    <td>A Major Ocean Picture.</td>
                    <td>1</td>
                    <td/>
                  </tr>
                  <tr>
                    <td>The BFG</td>
                    <td>The world is more giant than you can imagine.</td>
                    <td>1</td>
                    <td/>
                  </tr>
                  <tr>
                    <td>Twin Peaks: Fire Walk with Me</td>
                    <td>In a town like Twin Peaks, no one is innocent.</td>
                    <td>0</td>
                    <td/>
                  </tr>
                  <tr>
                    <td>Meet the Robinsons</td>
                    <td>If you think your family’s different, wait ’til you
                meet the family of the future.</td>
                    <td>1</td>
                    <td/>
                  </tr>
                  <tr>
                    <td>The Royal Tenenbaums</td>
                    <td>Family isn’t a word … It’s a sentence.</td>
                    <td>0</td>
                    <td/>
                  </tr>
                </tbody>
              </table>
            </table-wrap>
          </fig>
          <fig id="tbl-5">
            <caption>
              <p>Table 5: Count of Positive and Negative
        Sentiment</p>
            </caption>
            <table-wrap>
              <table>
                <thead>
                  <tr>
                    <th>Sentiment</th>
                    <th>Count</th>
                  </tr>
                </thead>
                <tbody>
                  <tr>
                    <td>Positive</td>
                    <td>1476</td>
                  </tr>
                  <tr>
                    <td>Negative</td>
                    <td>1340</td>
                  </tr>
                </tbody>
              </table>
            </table-wrap>
          </fig>
        </sec>
        <sec id="starpower-variable">
          <title>3.1.3 Starpower Variable</title>
          <p>One of the most important building blocks of a film is the cast
      of actors and actresses, and well-known names can be a huge draw
      to the theatres for movie-goers. This feature seemingly has an
      impact on the outcome of the film and its financial success. Thus,
      finding a way to classify the ‘starpowerness’ of the cast was
      paramount to this analysis. The dataset, unfortunately, only
      provides the three main cast members, which discounts films that
      rely on an ensemble cast or have a large enough budget to cast
      many big names. That being said, this research attempted to define
      a metric that quantified this ‘starpower’ aspect of the three cast
      members, in the hopes that the success and name-recognition can be
      at least partly captured.</p>
          <p>The metric was created by collecting lists of A-list and B-list
      actors and actresses.</p>
          <p>“IMDb a-List Actors”
      (<xref alt="n.d." rid="ref-imdb_a_list_actors" ref-type="bibr">n.d.</xref>)
      “IMDb a-List Actresses”
      (<xref alt="n.d." rid="ref-imdb_a_list_actresses" ref-type="bibr">n.d.</xref>)
      “IMDb b-List Actors and Actresses”
      (<xref alt="n.d." rid="ref-imdb_b_list" ref-type="bibr">n.d.</xref>)</p>
          <p>In film terms, these categorizations reflect how ‘bankable’ the
      stars are or how much financial draw they bring to a film,
      theoretically. These lists are all collected from IMDb and include
      a wide range of household names. With these lists, the cast
      variable was split into <monospace>actor1</monospace>,
      <monospace>actor2</monospace>, and <monospace>actor3</monospace>
      based simply on the order in which they were listed. Then, each of
      the cast variables was referenced against all three of the lists.
      The film title received:</p>
          <list list-type="bullet">
            <list-item>
              <p><bold>2 points</bold> if a cast member was part of the
          A-list
          </p>
            </list-item>
            <list-item>
              <p><bold>1 point</bold> if a cast member was part of the
          B-list</p>
            </list-item>
          </list>
          <p>These points were added in the <monospace>starpower</monospace>
      variable and then divided by three to get a finalized score of the
      points across the three cast members.
      <xref alt="Table 6" rid="tbl-6">Table 6</xref> shows an example of
      the scoring.</p>
          <fig id="tbl-6">
            <caption>
              <p>Table 6: Starpower Metric Scores for the Cast of 10
        Films</p>
            </caption>
            <table-wrap>
              <table>
                <colgroup>
                  <col width="30%"/>
                  <col width="29%"/>
                  <col width="25%"/>
                  <col width="16%"/>
                </colgroup>
                <thead>
                  <tr>
                    <th>actor1</th>
                    <th>actor2</th>
                    <th>actor3</th>
                    <th>starpower</th>
                  </tr>
                </thead>
                <tbody>
                  <tr>
                    <td>Mark Wahlberg</td>
                    <td>Tyrese Gibson</td>
                    <td>André 3000</td>
                    <td>0.666667</td>
                  </tr>
                  <tr>
                    <td>Jamie Bell</td>
                    <td>Andy Serkis</td>
                    <td>Daniel Craig</td>
                    <td>1.333333</td>
                  </tr>
                  <tr>
                    <td>Ryan Reynolds</td>
                    <td>Blake Lively</td>
                    <td>Peter Sarsgaard</td>
                    <td>0.333333</td>
                  </tr>
                  <tr>
                    <td>Marc Singer</td>
                    <td>Tanya Roberts</td>
                    <td>Rip Torn</td>
                    <td>0.000000</td>
                  </tr>
                  <tr>
                    <td>Tom Hiddleston</td>
                    <td>Samuel L. Jackson</td>
                    <td>Brie Larson</td>
                    <td>1.000000</td>
                  </tr>
                  <tr>
                    <td>Jeremy Renner</td>
                    <td>Ed Helms</td>
                    <td>Jake Johnson</td>
                    <td>0.000000</td>
                  </tr>
                  <tr>
                    <td>Frankie Muniz</td>
                    <td>Amanda Bynes</td>
                    <td>Paul Giamatti</td>
                    <td>1.000000</td>
                  </tr>
                  <tr>
                    <td>Ben Barnes</td>
                    <td>Skandar Keynes</td>
                    <td>Georgie Henley</td>
                    <td>0.000000</td>
                  </tr>
                  <tr>
                    <td>Jason Bateman</td>
                    <td>Charlie Day</td>
                    <td>Jason Sudeikis</td>
                    <td>1.000000</td>
                  </tr>
                  <tr>
                    <td>Jack Black</td>
                    <td>Ana de la Reguera</td>
                    <td>Héctor Jiménez</td>
                    <td>0.333333</td>
                  </tr>
                </tbody>
              </table>
            </table-wrap>
          </fig>
        </sec>
        <sec id="feamle-leading-role-variable">
          <title>3.1.4 Feamle Leading Role Variable</title>
          <p>This analysis relied on the ability to distinguish between
      female and male leading actresses and actors; however, this is not
      something directly encoded into the metadata of a film, thus this
      variable had to be manufactured. In order to achieve this, a list
      of all current female actresses was collected from Wikipedia “List
      of American Film Actresses”
      (<xref alt="n.d." rid="ref-wiki_film_actresses" ref-type="bibr">n.d.</xref>).
      This list included 2,816 names of female actresses, alphabetized.
      To note, there were attempts to utilize a list of all female names
      and an off-the-shelf model to guess whether the cast member listed
      identified as male or female, however, both of these methods
      produced more inaccuracy, thus the list of female actresses method
      was proceeded with.</p>
          <p>The next step was to determine only the presumed lead cast
      member by extracting the first person listed in the
      <monospace>actors</monospace> variable of the dataset. This name
      was then compared against the list of female actresses and
      received a value of 1 if the cast member was included on the
      list.</p>
          <p>Therefore, the result was a variable titled
      <monospace>female_lead</monospace> if the first cast member listed
      in the IMDb metadata was a member of the current working female
      actress list and a 0 if the cast member was not a member of the
      list and, thus, presumably a male actor.
      <xref alt="Table 7" rid="tbl-7">Table 7</xref> displays an example
      of the accuracy results of this variable.</p>
          <fig id="tbl-7">
            <caption>
              <p>Table 7: Example of the
        <monospace>female_lead</monospace> Variable</p>
            </caption>
            <table-wrap>
              <table>
                <thead>
                  <tr>
                    <th>Title</th>
                    <th>First Actor</th>
                    <th>Female Lead</th>
                  </tr>
                </thead>
                <tbody>
                  <tr>
                    <td>The Family</td>
                    <td>Robert De Niro</td>
                    <td>0</td>
                  </tr>
                  <tr>
                    <td>The Shack</td>
                    <td>Sam Worthington</td>
                    <td>0</td>
                  </tr>
                  <tr>
                    <td>The Dead Zone</td>
                    <td>Christopher Walken</td>
                    <td>0</td>
                  </tr>
                  <tr>
                    <td>The Ref</td>
                    <td>Denis Leary</td>
                    <td>0</td>
                  </tr>
                  <tr>
                    <td>Flyboys</td>
                    <td>James Franco</td>
                    <td>0</td>
                  </tr>
                  <tr>
                    <td>ATL</td>
                    <td>Tip ‘T.I.’ Harris</td>
                    <td>0</td>
                  </tr>
                  <tr>
                    <td>Like a Boss</td>
                    <td>Tiffany Haddish</td>
                    <td>1</td>
                  </tr>
                  <tr>
                    <td>Enemy Mine</td>
                    <td>Dennis Quaid</td>
                    <td>0</td>
                  </tr>
                  <tr>
                    <td>Proud Mary</td>
                    <td>Taraji P. Henson</td>
                    <td>1</td>
                  </tr>
                  <tr>
                    <td>Valmont</td>
                    <td>Colin Firth</td>
                    <td>0</td>
                  </tr>
                </tbody>
              </table>
            </table-wrap>
          </fig>
          <p>As displayed in <xref alt="Table 8" rid="tbl-8">Table 8</xref>
      the films were split between 488 films with female leading
      actresses and 2328 films with male leading actors.</p>
          <fig id="tbl-8">
            <caption>
              <p>Table 8: Male Versus Female Director
        Counts</p>
            </caption>
            <table-wrap>
              <table>
                <thead>
                  <tr>
                    <th>Name</th>
                    <th>Year</th>
                  </tr>
                </thead>
                <tbody>
                  <tr>
                    <td>Female Leads</td>
                    <td>488</td>
                  </tr>
                  <tr>
                    <td>Male Leads</td>
                    <td>2328</td>
                  </tr>
                </tbody>
              </table>
            </table-wrap>
          </fig>
        </sec>
      </sec>
      <sec id="propensity-score-matching">
        <title>3.2 Propensity Score Matching</title>
        <p>With these manufactured variables created, the primary
    statistical analysis performed was propensity score matching (PSM).
    This statistical method allows for comparison of films that are
    similar across all observed covariates, differing only in whether
    the lead is a male or female actor or actress. In this context, the
    presence of a female lead is handled as a treatment, and the effect
    of that treatment on the outcome variable is estimated.</p>
        <p>Unlike simply including covariates as controls in a regression
    equation, this technique aims to reduce selection bias by matching
    treated and control units based on their likelihood of receiving the
    treatment, given the covariates. This creates a more comparable
    dataset, which quasi-mimics the conditions of a randomized
    experiment.</p>
        <p>The process of propensity score matching began with normalizing
    the variables due to the very differing range of values across
    variables like the IMDb rating (which is 0-10) and the budget (which
    can reach hundreds of millions). This was done with Sklearn’s
    StandardScaler scikit-learn developers
    (<xref alt="2025" rid="ref-scikit_learn_standardscaler" ref-type="bibr">2025</xref>)
    and performed on all numerical variables.</p>
        <p>Following this step, the variance inflation factor (VIF) was
    checked to investigate any multicollinearity issues among the
    covariates that would bias the analysis. This yielded some
    problematic variables, which resulted in excluding those that
    exceeded the VIF threshold of 10 points. The following variables
    were excluded: international country (domestic country kept), other
    language (English kept), musical genre (all other genre categories
    kept), and accepted MPAA rating (all other MPAA ratings kept).</p>
        <p>Next, a logistic regression was estimated. The variables
    <monospace>metascore</monospace>, <monospace>IMDb votes</monospace>,
    <monospace>TMDb rating</monospace>,
    <monospace>TMDb votes</monospace>,
    <monospace>Oscars Won</monospace>,
    <monospace>Oscars Nominated</monospace>,
    <monospace>Award Wins</monospace>, and
    <monospace>Award Nominations</monospace> were omitted because they
    are ex-post variables, meaning they represent effects of the
    outcomes as opposed to causes of it, thus creating data leakage and
    bias. Therefore, only ex-ante variables are considered. The
    resulting equation is as follows, representing a female leading role
    as the treatment and the film characteristics as covariates:</p>
        <p/>
        <p>The result of this equation is propensity scores (ps) for each
    film title (dataset row), which represent the calculated probability
    of the film having a female leading actress. A score close to 0
    indicates a higher likelihood of the film having a male lead, while
    a score closer to 1 indicates a higher likelihood of a film having a
    female lead. These scores are then used to match, utilizing 1:1
    nearest neighbor matching, the movies across the two groups of
    leading actors/actresses based on the closest propensity score. This
    results in a matched dataset with each row being a matched pair of
    films that are similar in all aspects except for the leading
    role.</p>
        <fig id="tbl-9">
          <caption>
            <p>Table 9: Example of Propensity Score Matching Between
      Male and Female Led Films</p>
          </caption>
          <table-wrap>
            <table>
              <thead>
                <tr>
                  <th>Female Led Movie</th>
                  <th>PS Female</th>
                  <th>Male Led Movie</th>
                </tr>
              </thead>
              <tbody>
                <tr>
                  <td>Miss Congeniality</td>
                  <td>0.082866</td>
                  <td>Back to the Future Part III</td>
                </tr>
                <tr>
                  <td>GI Jane</td>
                  <td>0.031775</td>
                  <td>Gladiator</td>
                </tr>
                <tr>
                  <td>Freaky Friday</td>
                  <td>0.212226</td>
                  <td>The Boat the Rocked</td>
                </tr>
                <tr>
                  <td>Kill Bill: Vol. 2</td>
                  <td>0.066924</td>
                  <td>2 Fast 2 Furious</td>
                </tr>
              </tbody>
            </table>
          </table-wrap>
        </fig>
        <p>The final step was to calculate and compare the box-office
    performance of matched female versus male lead films. These results
    are discussed in
    <xref alt="Section 4" rid="sec-results">Section 4</xref>.</p>
      </sec>
      <sec id="robustness-checks">
        <title>3.3 Robustness Checks</title>
        <p>As a robustness check, the <monospace>IMDb rating</monospace>,
    which is a score from 0-10, calculated from a weighted average of
    user ratings on the Internet Movie Database, is utilized as a
    secondary outcome variable. The same methodology of propensity score
    matching is used; however, the analysis now investigates whether a
    female lead role causes a change in the critical success of the
    film.</p>
      </sec>
    </sec>
    <sec id="sec-results">
      <title>4 Results</title>
      <fig id="tbl-10">
        <caption>
          <p>Table 10: Mean of Box Office and IMDb Rating for Male
    Versus Female Led Films</p>
        </caption>
        <table-wrap>
          <table>
            <thead>
              <tr>
                <th>Gender of Lead Role</th>
                <th>Box Office</th>
                <th>IMDb Rating</th>
              </tr>
            </thead>
            <tbody>
              <tr>
                <td>Female</td>
                <td>62,708,871.36</td>
                <td>6.329</td>
              </tr>
              <tr>
                <td>Male</td>
                <td>61,076,707.45</td>
                <td>6.601</td>
              </tr>
            </tbody>
          </table>
        </table-wrap>
      </fig>
      <sec id="box-office">
        <title>4.1 Box Office</title>
        <p>As shown in <xref alt="Table 10" rid="tbl-10">Table 10</xref>,
    the initial hypothesis of this research that films featuring a woman
    in the leading role would generate lower box-office revenues was not
    supported by the analysis. In fact, the opposite was found: that
    female films earned an average of $62,708,871, while male films
    earned an average of $61,076,707 in box-office revenues. This means
    that female-led films earned 1,632,163.91 more at the box office on
    average. While the magnitude of the difference is modest compared to
    the average box-office revenue, the matched sample analysis does
    suggest that having a female lead was associated with slightly
    higher box-office performance.</p>
      </sec>
      <sec id="imdb-rating">
        <title>4.2 IMDb Rating</title>
        <p>The robustness check, which substituted IMDb rating as the
    outcome variable (also in
    <xref alt="Table 10" rid="tbl-10">Table 10</xref>), revealed a
    different pattern. Female-led films had an average IMDb rating of
    6.329, while male-led films had an average of 6.601, a difference of
    -0.272. This indicated that, on average, female-led films received a
    0.272 lower audience rating than male-led films despite their
    slightly better box-office results.</p>
      </sec>
    </sec>
    <sec id="sec-discuss">
      <title>5 Discussion</title>
      <p>There are a couple of plausible explanations for the disparity of
  these results. As one explanation, this could be an indication that
  the general public of individuals who partake in film going casually
  have fully accepted female-led films and even enjoy them more.
  However, film critics and individuals who view films more seriously
  are less accepting of women playing large roles in films. Another
  explanation is that women are cast in roles that seemingly lack depth
  and thus are less likely to receive critical success, meaning
  filmmakers are combining women leading roles with less serious script
  material, but still casting them in blockbuster films that draw an
  audience. Furthermore, this could indicate an audience leaning toward
  certain female actresses or female actresses in general, pushing
  box-office numbers higher.</p>
      <p>The analysis, while offering insightful results, still faced some
  limitations. Firstly, there is always room for more data and a larger,
  more encompassing dataset. With a little over 2,000 films, the dataset
  barely scratches the surface of the total filmography possible, and
  more data would allow for more accurate propensity score matching.
  Secondly, the ‘starpower’ metric is quite subjective in that the lists
  of A-listers and B-listers were based on opinions about the actors and
  actresses, instead of some numeric metric. Thirdly, there is a small
  level of inaccuracy with the creation of the female lead variable.
  While the list of actresses utilized was quite large, it was not fully
  encompassing; thus, some actresses were not classified correctly.
  Furthermore, this variable was created solely by splitting the cast
  list and taking the first name, which is not necessarily the lead cast
  member in all cases, and disregards films that have more than one
  leading actor or actress or have an ensemble cast.</p>
      <p>These limitations offer much room for future work. To start, a more
  detailed and objective metric of the ‘starpower’ variable could be
  useful, as this is a huge determinant of the making of a film. This
  could be performed with network analysis of the cast to determine the
  centrality of the actors as a measure of their importance in the
  industry. In addition, classifying the tagline and description based
  on content instead of sentiment could add more depth to the propensity
  scoring. Similarly, a more comprehensive look at the film genres could
  create better matches. This could be done by leveraging an LLM to
  score the film from 0-1 for each genre, indicating how much the film
  falls into that category, instead of weighting each genre listed
  equally. Finally, implementing a different gender-based treatment
  variable could be a telling robustness check. For example, defining
  the treatment as films that pass the Bechdel test could create a more
  accurate look at how gender roles truly impact the outcome of the
  film.</p>
    </sec>
    <sec id="sec-conclusion">
      <title>6 Conclusion</title>
      <p>Taken together, the findings offer opposing views of how gender
  matters in the film industry. The box office analysis suggests a
  positive causal relationship between a female in the title role and
  revenue performance, while the IMDb rating analysis suggests a
  negative causal relationship between female leads and audience
  ratings.</p>
      <p>Whatever the underlying reasoning, the differing results underscore
  the complexity of the relationship between gender representation in
  leading roles and measures of film success. This highlights the
  importance of considering multiple outcome variables when assessing
  potential treatment effects, especially when dealing with a topic as
  nuanced as film and entertainment.</p>
    </sec>
  </body>
  <back>
    <ref-list>
      <title>References</title>
      <ref id="ref-the_numbers_production_companies">
        <element-citation>
          <article-title>Production companies overview</article-title>
          <publisher-name>https://www.the-numbers.com/movies/production-companies/#production_companies_overview=od1</publisher-name>
        </element-citation>
      </ref>
      <ref id="ref-imdb_top_directors">
        <element-citation>
          <article-title>IMDb list: Top 25 greatest directors of all time</article-title>
          <publisher-name>https://www.imdb.com/list/ls052380992/</publisher-name>
        </element-citation>
      </ref>
      <ref id="ref-imdb_top_writers">
        <element-citation>
          <article-title>IMDb list: Top 20 greatest screenwriters of all time</article-title>
          <publisher-name>https://www.imdb.com/list/ls064457317/</publisher-name>
        </element-citation>
      </ref>
      <ref id="ref-wiki_film_actresses">
        <element-citation>
          <article-title>List of american film actresses</article-title>
          <publisher-name>https://en.wikipedia.org/wiki/List_of_American_film_actresses</publisher-name>
        </element-citation>
      </ref>
      <ref id="ref-imdb_a_list_actors">
        <element-citation>
          <article-title>IMDb a-list actors</article-title>
          <publisher-name>https://www.imdb.com/list/ls056262001/</publisher-name>
        </element-citation>
      </ref>
      <ref id="ref-imdb_a_list_actresses">
        <element-citation>
          <article-title>IMDb a-list actresses</article-title>
          <publisher-name>https://www.imdb.com/list/ls056262192/</publisher-name>
        </element-citation>
      </ref>
      <ref id="ref-imdb_b_list">
        <element-citation>
          <article-title>IMDb b-list actors and actresses</article-title>
          <publisher-name>https://www.imdb.com/list/ls024783564/</publisher-name>
        </element-citation>
      </ref>
      <ref id="ref-distilbert_sst2_hf">
        <element-citation>
          <person-group person-group-type="author">
            <name>
              <surname>Face</surname>
              <given-names>Hugging</given-names>
            </name>
          </person-group>
          <article-title>Distilbert-base-uncased-finetuned-sst-2-english</article-title>
          <publisher-name>https://huggingface.co/distilbert/distilbert-base-uncased-finetuned-sst-2-english</publisher-name>
        </element-citation>
      </ref>
      <ref id="ref-scikit_learn_standardscaler">
        <element-citation>
          <person-group person-group-type="author">
            <string-name>scikit-learn developers</string-name>
          </person-group>
          <article-title>StandardScaler — scikit-learn 1.7.1 documentation</article-title>
          <publisher-name>https://scikit-learn.org/stable/modules/generated/sklearn.preprocessing.StandardScaler.html</publisher-name>
          <year iso-8601-date="2025">2025</year>
        </element-citation>
      </ref>
      <ref id="ref-science_cinema_history">
        <element-citation>
          <person-group person-group-type="author">
            <string-name>National Science and Media Museum</string-name>
          </person-group>
          <article-title>A very short history of cinema</article-title>
          <publisher-name>https://www.scienceandmediamuseum.org.uk/objects-and-stories/very-short-history-of-cinema</publisher-name>
          <year iso-8601-date="2020">2020</year>
        </element-citation>
      </ref>
      <ref id="ref-statista_film">
        <element-citation>
          <person-group person-group-type="author">
            <name>
              <surname>Statista</surname>
            </name>
          </person-group>
          <article-title>Film production worldwide - statista topic overview</article-title>
          <publisher-name>https://www.statista.com/topics/5431/film-production-worldwide/</publisher-name>
        </element-citation>
      </ref>
    </ref-list>
  </back>
  <sub-article article-type="notebook" id="nb-15-nb-article">
    <front-stub>
      <title-group>
        <article-title>Leading Ladies and Lost Revenue: A Causal Analysis of
Female Representation and Box-Office Returns</article-title>
      </title-group>
      <contrib-group>
        <contrib contrib-type="author" corresp="yes">
          <name>
            <surname>Healy</surname>
            <given-names>Lizzie</given-names>
          </name>
          <string-name>Lizzie Healy</string-name>
          <email>emh201@georgetown.com</email>
          <role>Project Designer</role>
          <role>Data Collector</role>
          <role>Methodologist</role>
          <role>Analyst</role>
          <role vocab="https://credit.niso.org" vocab-term="visualization" vocab-term-identifier="https://credit.niso.org/contributor-roles/visualization/">Visualization</role>
          <xref ref-type="aff" rid="aff-1-nb-article">a</xref>
          <xref ref-type="corresp" rid="cor-1-nb-article">*</xref>
        </contrib>
      </contrib-group>
      <aff id="aff-1-nb-article">
        <institution-wrap>
          <institution>Georgetown University</institution>
        </institution-wrap>
      </aff>
      <author-notes>
        <corresp id="cor-1-nb-article">emh201@georgetown.com</corresp>
      </author-notes>
      <abstract>
        <p>This work will investigate the impact of gender bias in the film
industry pertaining to economic outcomes. Specifically, it will
establish a causal link between a film casting a female actress in the
leading role and the resulting box-office revenue. This will be
accomplished utilizing propensity weighting, which will match movies
based on the perceived similarity of their characteristics. These
predictor variables will include the year, month of release, genre,
runtime, director and writers, star power level of the cast, MPAA
rating, country of release, language, film description, the production
budget, the country of release, production companies, and tagline. To
deal with the variables that are non-numeric the following steps will be
taken. Firstly, a manufactured metric will be created to capture the
preceived ‘starpower’ of the actors/actresses. Secondly, a sentiment
analysis will be performed on the film description and tagline. The
primary outcome variable will be the box-office number measured in US
dollars, measured as the gross value worldwide. The IMDb score will be
employed as an additional outcome measure to be used as a robustness
check. The initial hypothesis is that films that opt to feature a female
in the leading role will experience a decrease value in the box-office
revenue.</p>
      </abstract>
    </front-stub>
    <body>
      <sec id="introduction-nb-article">
        <title>1 Introduction</title>
        <sec id="cell-86a49b58-nb-article" specific-use="notebook-content">
          <code language="python">import matplotlib.pyplot as plt
import numpy as np

#| label: fig-timeline
#| fig-cap: Visual of the 
#| fig-alt: An event plot of the years of the last 8 eruptions on La Palma.</code>
        </sec>
        <sec id="cell-1b5f678b-nb-article" specific-use="notebook-content">
          <p>The film industry has been a dominant force in United States
  entertainment since cinema became a popular pastime in the 1930s and
  1940s
  (<xref alt="National Science and Media Museum 2020" rid="ref-science_cinema_history-nb-article" ref-type="bibr">National
  Science and Media Museum 2020</xref>). Today, it remains an extremely
  lucrative business, to the tune of approximately $77 billion annually
  (<xref alt="Statista n.d." rid="ref-statista_film-nb-article" ref-type="bibr">Statista
  n.d.</xref>). This enduring profitability has attracted filmmakers,
  production companies, economists, and film enthusiasts alike, all
  seeking to understand what drives the success of a film. Some highly
  anticipated films, backed by a compelling storyline, a star-studded
  cast, and a substantial production budget, go on to dominate the box
  office and sweep critical awards, while others flop on opening weekend
  and struggle to recoup their investment. So, what makes a movie
  successful? Is there some magic formula, or are there specific
  pre-production factors that drive revenue? These questions remain
  unanswered, but in the century since the dawn of film, research-backed
  theories have begun to emerge.</p>
          <p>As a first attempt at providing one such theory, my previous paper,
  <ext-link ext-link-type="uri" xlink:href="./assets/thesis.pdf">Behind
  the Box Office: Directorial Influence on Film Revenue in the United
  States Entertainment Industry</ext-link> attempted to analyze the link
  between director quality and the box-office success of a film. The
  paper created two novel measures of director quality: a summation of
  all box-office revenue earned by the director’s films and the
  accumulated number of critical awards from the fifteen years leading
  up to the film in question. The main dependent variable was domestic
  box-office revenue, and a robustness check was implemented, changing
  the dependent variable to the IMDb rating earned.</p>
          <fig id="tbl-1-nb-article">
            <caption>
              <p>Table 1: Directorial Effect on Domestic Gross with
    Director Controls</p>
            </caption>
            <graphic mimetype="image" mime-subtype="png" xlink:href="./assets/thesis_table1.png"/>
          </fig>
          <fig id="tbl-2-nb-article">
            <caption>
              <p>Table 2: Directorial Effect on IMDb Rating with Director
    Controls</p>
            </caption>
            <graphic mimetype="image" mime-subtype="png" xlink:href="./assets/thesis_table2.png"/>
          </fig>
          <p>The paper found that an increase in director financial quality
  yielded between a 0.0289% and 0.0307% increase in domestic gross and
  no impact on IMDb rating. Conversely, director quality in terms of
  critical acclaim yielded no significant impact on domestic gross, but
  between 0.01803 and 0.0270 point increase in IMDb rating. The paper
  also discovered a statistically significant decrease in domestic gross
  for female directors as compared to male directors outlined in
  <xref alt="Table 1" rid="tbl-1-nb-article">Table 1</xref> and
  <xref alt="Table 2" rid="tbl-2-nb-article">Table 2</xref>.</p>
          <p>Overall, the results were thought-provoking; however, the
  methodology used was lacking in the causality department. The
  research, if anything, worked towards establishing a weak association
  due to its statistical analysis going only so far as a simple
  ordinary-least-squares regression and controlling for confounding
  variables. While the variables were considered and included in the
  regression equation, they were all treated equally as controls; thus,
  a more complex analysis is warranted.</p>
          <p>Moving forward, the work to get to causality includes introducing
  causal methods for handling covariates instead of just controlling for
  them. Furthermore, I wanted to investigate the conclusion of gender
  bias further and shifted this analysis to examine actors instead of
  directors.</p>
          <p>Thus, this paper will investigate the impact of gender bias in the
  film industry pertaining to economic outcomes. Specifically, it will
  attempt to establish a causal link between a film casting a female
  actress in the leading role and the resulting box-office revenue by
  employing propensity score matching.</p>
          <p>Data collection and preparation are discussed in
  <xref alt="Section 2" rid="sec-data-nb-article">Section 2</xref>. Methodology,
  manufactured variables, and propensity scoring are discussed in
  <xref alt="Section 3" rid="sec-meth-nb-article">Section 3</xref>. Results and
  analysis are presented in
  <xref alt="Section 4" rid="sec-results-nb-article">Section 4</xref>. Results are
  discussed in <xref alt="Section 5" rid="sec-discuss-nb-article">Section 5</xref>.
  Concluding remarks, limitations, and future work are discussed in
  <xref alt="Section 6" rid="sec-conclusion-nb-article">Section 6</xref>.</p>
        </sec>
        <sec id="sec-data-nb-article">
          <title>2 Data</title>
          <p>The data for this research was collected from two separate sources:
  <ext-link ext-link-type="uri" xlink:href="https://www.omdbapi.com/">Open
  Movie Database (OMDb)</ext-link> and
  <ext-link ext-link-type="uri" xlink:href="https://www.themoviedb.org/">The
  Movie Database (TMDb)</ext-link>. Both are sources for movie and
  television metadata, differing only in their sourcing and specific
  variables provided. OMDb partly sources from Amazon’s Internet Movie
  Database (IMDb) and then relies on crowdsourcing for missing data,
  while TMDb is independently created and relies solely on crowdsourcing
  from its community of film buffs to provide data entry for films. Both
  of these sources offer an API that allowed for the collection of movie
  metadata, which was then merged using an inner join on the film Title
  and resulted in the following variables: <monospace>Title</monospace>,
  <monospace>Year</monospace>, <monospace>Runtime</monospace>,
  <monospace>Budget</monospace>, <monospace>Released</monospace>,
  <monospace>Genre</monospace> (Action, Adventure, Animation, Biography,
  Comedy, Crime, Documentary, Drama, Family, Fantasy, Film Noir,
  History, Horror, Music, Musical, Mystery, Romance, Sci-Fi, Sport,
  Thriller, War, Western), <monospace>MPAA Rating</monospace> (G, GP, M,
  M/PG, NC-17, Not-Rated, PG, PG-13, R, TV-MA, Unrated, Accepted),
  <monospace>Production Companies</monospace>,
  <monospace>Director</monospace>, <monospace>Writer</monospace>,
  <monospace>Country</monospace>, <monospace>Language</monospace>,
  <monospace>Description</monospace>, <monospace>Tagline</monospace>,
  <monospace>Overview</monospace>, <monospace>Actors</monospace>,
  <monospace>Box Office</monospace>, <monospace>Revenue</monospace>,
  <monospace>IMDb Rating</monospace>, <monospace>Metascore</monospace>,
  <monospace>IMDb Votes</monospace>, <monospace>TMDb rating</monospace>,
  <monospace>Vote Count</monospace>, <monospace>Awards</monospace>, and
  <monospace>Poster URL</monospace>.</p>
          <p>With this combined dataset, some further preparation was required
  to move forward with the analysis. Firstly, some variables were
  dropped as they were deemed unimportant, while others were very
  similar across the datasets; for example, only the ‘Description’ was
  kept, and the ‘Overview’ variable was dropped. All missing and zero
  values in numerical variables were removed, and each of the variables
  was converted to the correct data type. The ‘Released’ date was split
  into three variables for the month, day, and year. For the categorical
  variables, two different techniques were utilized. For ‘Genre’ and
  ‘MPAA rating’, a one-hot encoding was applied. However, for the
  ‘Language’ and ‘Country’ only the first observation of each was kept,
  which was then categorized simply as either English or other language,
  and domestic (for the US) and international for all other
  countries.</p>
          <p>The final dataset included a total of 2,816 films with 61 columns
  of variables.</p>
          <fig id="tbl-3-nb-article">
            <caption>
              <p>Table 3: Summary Statistics of Numerical
    Variables</p>
            </caption>
            <table-wrap>
              <table>
                <thead>
                  <tr>
                    <th>Variable</th>
                    <th>Minimum</th>
                    <th>Maximum</th>
                  </tr>
                </thead>
                <tbody>
                  <tr>
                    <td>Box Office</td>
                    <td>3,622</td>
                    <td>858,373,000</td>
                  </tr>
                  <tr>
                    <td>Budget</td>
                    <td>7,000</td>
                    <td>460,000,000</td>
                  </tr>
                  <tr>
                    <td>Runtime</td>
                    <td>63</td>
                    <td>238</td>
                  </tr>
                  <tr>
                    <td>IMDb Rating</td>
                    <td>1.9</td>
                    <td>9.3</td>
                  </tr>
                  <tr>
                    <td>IMDb Votes</td>
                    <td>1,672</td>
                    <td>3,059,994</td>
                  </tr>
                </tbody>
              </table>
            </table-wrap>
          </fig>
          <p>The IMDb Rating, which is a score given by the Internet Movie
  Database, takes ratings given by IMDb users and aggregates them to
  generate a single rating from 0 to 10 for each film, with 10
  indicating a perfect film and 0 indicating the worst possible film. In
  this dataset, the lowest rating given was a 1.9, while the highest
  rating was a 9.3, and the average was around a 6.6 rating. As shown in
  <xref alt="Figure 2" rid="fig-2-nb-article">Figure 2</xref>, there is a clear
  decline in the average IMDb Rating over the years, beginning around
  1970 and flattening out over the last 20 or so years.</p>
          <fig id="fig-1-nb-article">
            <caption>
              <p>Figure 1: IMDb Rating Distribution</p>
            </caption>
            <graphic mimetype="image" mime-subtype="png" xlink:href="./notebooks/notebook_output/imdb_rating.png"/>
          </fig>
          <fig id="fig-2-nb-article">
            <caption>
              <p>Figure 2: IMDb Ratings over the Years</p>
            </caption>
            <graphic mimetype="image" mime-subtype="png" xlink:href="./notebooks/notebook_output/imdb_overtime.png"/>
          </fig>
          <p>The Box Office value is the total revenue earned by the film from
  ticket sales for the film’s release in theatres only. This metric is
  often utilized in entertainment economics literature as a proxy for
  the success of the film. This number boosts a mean of around 73.5
  million. As shown in <xref alt="Figure 3" rid="fig-3-nb-article">Figure 3</xref>,
  unlike the IMDb rating, the box office has seen a general increasing
  trend over the years since 1970, except for 2020 when theatres were
  closed due to COVID-19.</p>
          <fig id="fig-3-nb-article">
            <caption>
              <p>Figure 3: Box-Office Revenue over the
    Years</p>
            </caption>
            <graphic mimetype="image" mime-subtype="png" xlink:href="./notebooks/notebook_output/boxoffice_overtime.png"/>
          </fig>
          <p>When looking at the categorizations of the films, we see that most
  fall into the genres of drama, comedy, action, and adventure and have
  an MPAA rating of R, PG-13, or G
  (<xref alt="Figure 4" rid="fig-4-nb-article">Figure 4</xref> and
  <xref alt="Figure 5" rid="fig-5-nb-article">Figure 5</xref>).</p>
          <fig id="fig-4-nb-article">
            <caption>
              <p>Figure 4: Distribution of Film Genres</p>
            </caption>
            <graphic mimetype="image" mime-subtype="png" xlink:href="./notebooks/notebook_output/genre_counts.png"/>
          </fig>
          <fig id="fig-5-nb-article">
            <caption>
              <p>Figure 5: Percentage of Film MPAAs Ratings</p>
            </caption>
            <graphic mimetype="image" mime-subtype="png" xlink:href="./notebooks/notebook_output/mpaa_pie.png"/>
          </fig>
        </sec>
        <sec id="sec-meth-nb-article">
          <title>3 Methodology</title>
          <sec id="manufactured-variables-nb-article">
            <title>3.1 Manufactured Variables</title>
            <sec id="top-directors-writers-production-companies-nb-article">
              <title>3.1.1 Top Directors, Writers, Production Companies</title>
              <p>In order to incorporate the level of expertise of the team
      creating the film, this analysis worked to categorize the level of
      directors, writers, and production companies. All of these were
      attempting to better match movies based on the level of effort put
      into its creation in terms of money, knowledge, experience, and
      previous success. To achieve this, three lists were collected that
      detailed the top directors, writers, and production companies:</p>
              <p>“IMDb List: Top 25 Greatest Directors of All Time”
      (<xref alt="n.d." rid="ref-imdb_top_directors-nb-article" ref-type="bibr">n.d.</xref>)
      “IMDb List: Top 20 Greatest Screenwriters of All Time”
      (<xref alt="n.d." rid="ref-imdb_top_writers-nb-article" ref-type="bibr">n.d.</xref>)
      “Production Companies Overview”
      (<xref alt="n.d." rid="ref-the_numbers_production_companies-nb-article" ref-type="bibr">n.d.</xref>)</p>
              <p>The directors and writers were judged on a combination of their
      perceived skill and their lifetime achievement in terms of awards
      and accolades. The production companies were compiled simply based
      on the total domestic box-office revenue amassed across all films
      they have produced.</p>
              <p>The director, writer, and production company variables were
      then referenced against these lists, receiving a 1 if the entity
      was mentioned in the list and a 0 otherwise, resulting in three
      one-hot encoded variables: <monospace>Top_Production</monospace>,
      <monospace>Top_Director</monospace>, and
      <monospace>Top_Writer</monospace>. For the sake of simplicity, if
      more than one entity was listed for any of these variables, only
      the first entity was taken into account.</p>
            </sec>
            <sec id="tagline-and-description-sentiment-analysis-nb-article">
              <title>3.1.2 Tagline and Description Sentiment Analysis</title>
              <p>In order to extract meaningful value from the film description
      and tagline, sentiment analysis was performed on the text. This
      sentiment analysis was performed by an off-the-shelf pre-trained
      model publicly available on Hugging Face Face
      (<xref alt="n.d." rid="ref-distilbert_sst2_hf-nb-article" ref-type="bibr">n.d.</xref>)
      . This model was trained on English text specifically for binary
      text classification and achieved a high accuracy score. The result
      is two variables with a binary value of 1 for positive sentiment
      or 0 for negative sentiment of both the film description and film
      tagline.</p>
              <fig id="tbl-4-nb-article">
                <caption>
                  <p>Table 4: Example of the Tagline Sentiment
        Values</p>
                </caption>
                <table-wrap>
                  <table>
                    <colgroup>
                      <col width="30%"/>
                      <col width="29%"/>
                      <col width="25%"/>
                      <col width="16%"/>
                    </colgroup>
                    <thead>
                      <tr>
                        <th>Title</th>
                        <th>Tagline</th>
                        <th>Tagline Sentiment</th>
                        <th/>
                      </tr>
                    </thead>
                    <tbody>
                      <tr>
                        <td>Surf’s Up</td>
                        <td>A Major Ocean Picture.</td>
                        <td>1</td>
                        <td/>
                      </tr>
                      <tr>
                        <td>The BFG</td>
                        <td>The world is more giant than you can imagine.</td>
                        <td>1</td>
                        <td/>
                      </tr>
                      <tr>
                        <td>Twin Peaks: Fire Walk with Me</td>
                        <td>In a town like Twin Peaks, no one is innocent.</td>
                        <td>0</td>
                        <td/>
                      </tr>
                      <tr>
                        <td>Meet the Robinsons</td>
                        <td>If you think your family’s different, wait ’til you
                meet the family of the future.</td>
                        <td>1</td>
                        <td/>
                      </tr>
                      <tr>
                        <td>The Royal Tenenbaums</td>
                        <td>Family isn’t a word … It’s a sentence.</td>
                        <td>0</td>
                        <td/>
                      </tr>
                    </tbody>
                  </table>
                </table-wrap>
              </fig>
              <fig id="tbl-5-nb-article">
                <caption>
                  <p>Table 5: Count of Positive and Negative
        Sentiment</p>
                </caption>
                <table-wrap>
                  <table>
                    <thead>
                      <tr>
                        <th>Sentiment</th>
                        <th>Count</th>
                      </tr>
                    </thead>
                    <tbody>
                      <tr>
                        <td>Positive</td>
                        <td>1476</td>
                      </tr>
                      <tr>
                        <td>Negative</td>
                        <td>1340</td>
                      </tr>
                    </tbody>
                  </table>
                </table-wrap>
              </fig>
            </sec>
            <sec id="starpower-variable-nb-article">
              <title>3.1.3 Starpower Variable</title>
              <p>One of the most important building blocks of a film is the cast
      of actors and actresses, and well-known names can be a huge draw
      to the theatres for movie-goers. This feature seemingly has an
      impact on the outcome of the film and its financial success. Thus,
      finding a way to classify the ‘starpowerness’ of the cast was
      paramount to this analysis. The dataset, unfortunately, only
      provides the three main cast members, which discounts films that
      rely on an ensemble cast or have a large enough budget to cast
      many big names. That being said, this research attempted to define
      a metric that quantified this ‘starpower’ aspect of the three cast
      members, in the hopes that the success and name-recognition can be
      at least partly captured.</p>
              <p>The metric was created by collecting lists of A-list and B-list
      actors and actresses.</p>
              <p>“IMDb a-List Actors”
      (<xref alt="n.d." rid="ref-imdb_a_list_actors-nb-article" ref-type="bibr">n.d.</xref>)
      “IMDb a-List Actresses”
      (<xref alt="n.d." rid="ref-imdb_a_list_actresses-nb-article" ref-type="bibr">n.d.</xref>)
      “IMDb b-List Actors and Actresses”
      (<xref alt="n.d." rid="ref-imdb_b_list-nb-article" ref-type="bibr">n.d.</xref>)</p>
              <p>In film terms, these categorizations reflect how ‘bankable’ the
      stars are or how much financial draw they bring to a film,
      theoretically. These lists are all collected from IMDb and include
      a wide range of household names. With these lists, the cast
      variable was split into <monospace>actor1</monospace>,
      <monospace>actor2</monospace>, and <monospace>actor3</monospace>
      based simply on the order in which they were listed. Then, each of
      the cast variables was referenced against all three of the lists.
      The film title received:</p>
              <list list-type="bullet">
                <list-item>
                  <p><bold>2 points</bold> if a cast member was part of the
          A-list
          </p>
                </list-item>
                <list-item>
                  <p><bold>1 point</bold> if a cast member was part of the
          B-list</p>
                </list-item>
              </list>
              <p>These points were added in the <monospace>starpower</monospace>
      variable and then divided by three to get a finalized score of the
      points across the three cast members.
      <xref alt="Table 6" rid="tbl-6-nb-article">Table 6</xref> shows an example of
      the scoring.</p>
              <fig id="tbl-6-nb-article">
                <caption>
                  <p>Table 6: Starpower Metric Scores for the Cast of 10
        Films</p>
                </caption>
                <table-wrap>
                  <table>
                    <colgroup>
                      <col width="30%"/>
                      <col width="29%"/>
                      <col width="25%"/>
                      <col width="16%"/>
                    </colgroup>
                    <thead>
                      <tr>
                        <th>actor1</th>
                        <th>actor2</th>
                        <th>actor3</th>
                        <th>starpower</th>
                      </tr>
                    </thead>
                    <tbody>
                      <tr>
                        <td>Mark Wahlberg</td>
                        <td>Tyrese Gibson</td>
                        <td>André 3000</td>
                        <td>0.666667</td>
                      </tr>
                      <tr>
                        <td>Jamie Bell</td>
                        <td>Andy Serkis</td>
                        <td>Daniel Craig</td>
                        <td>1.333333</td>
                      </tr>
                      <tr>
                        <td>Ryan Reynolds</td>
                        <td>Blake Lively</td>
                        <td>Peter Sarsgaard</td>
                        <td>0.333333</td>
                      </tr>
                      <tr>
                        <td>Marc Singer</td>
                        <td>Tanya Roberts</td>
                        <td>Rip Torn</td>
                        <td>0.000000</td>
                      </tr>
                      <tr>
                        <td>Tom Hiddleston</td>
                        <td>Samuel L. Jackson</td>
                        <td>Brie Larson</td>
                        <td>1.000000</td>
                      </tr>
                      <tr>
                        <td>Jeremy Renner</td>
                        <td>Ed Helms</td>
                        <td>Jake Johnson</td>
                        <td>0.000000</td>
                      </tr>
                      <tr>
                        <td>Frankie Muniz</td>
                        <td>Amanda Bynes</td>
                        <td>Paul Giamatti</td>
                        <td>1.000000</td>
                      </tr>
                      <tr>
                        <td>Ben Barnes</td>
                        <td>Skandar Keynes</td>
                        <td>Georgie Henley</td>
                        <td>0.000000</td>
                      </tr>
                      <tr>
                        <td>Jason Bateman</td>
                        <td>Charlie Day</td>
                        <td>Jason Sudeikis</td>
                        <td>1.000000</td>
                      </tr>
                      <tr>
                        <td>Jack Black</td>
                        <td>Ana de la Reguera</td>
                        <td>Héctor Jiménez</td>
                        <td>0.333333</td>
                      </tr>
                    </tbody>
                  </table>
                </table-wrap>
              </fig>
            </sec>
            <sec id="feamle-leading-role-variable-nb-article">
              <title>3.1.4 Feamle Leading Role Variable</title>
              <p>This analysis relied on the ability to distinguish between
      female and male leading actresses and actors; however, this is not
      something directly encoded into the metadata of a film, thus this
      variable had to be manufactured. In order to achieve this, a list
      of all current female actresses was collected from Wikipedia “List
      of American Film Actresses”
      (<xref alt="n.d." rid="ref-wiki_film_actresses-nb-article" ref-type="bibr">n.d.</xref>).
      This list included 2,816 names of female actresses, alphabetized.
      To note, there were attempts to utilize a list of all female names
      and an off-the-shelf model to guess whether the cast member listed
      identified as male or female, however, both of these methods
      produced more inaccuracy, thus the list of female actresses method
      was proceeded with.</p>
              <p>The next step was to determine only the presumed lead cast
      member by extracting the first person listed in the
      <monospace>actors</monospace> variable of the dataset. This name
      was then compared against the list of female actresses and
      received a value of 1 if the cast member was included on the
      list.</p>
              <p>Therefore, the result was a variable titled
      <monospace>female_lead</monospace> if the first cast member listed
      in the IMDb metadata was a member of the current working female
      actress list and a 0 if the cast member was not a member of the
      list and, thus, presumably a male actor.
      <xref alt="Table 7" rid="tbl-7-nb-article">Table 7</xref> displays an example
      of the accuracy results of this variable.</p>
              <fig id="tbl-7-nb-article">
                <caption>
                  <p>Table 7: Example of the
        <monospace>female_lead</monospace> Variable</p>
                </caption>
                <table-wrap>
                  <table>
                    <thead>
                      <tr>
                        <th>Title</th>
                        <th>First Actor</th>
                        <th>Female Lead</th>
                      </tr>
                    </thead>
                    <tbody>
                      <tr>
                        <td>The Family</td>
                        <td>Robert De Niro</td>
                        <td>0</td>
                      </tr>
                      <tr>
                        <td>The Shack</td>
                        <td>Sam Worthington</td>
                        <td>0</td>
                      </tr>
                      <tr>
                        <td>The Dead Zone</td>
                        <td>Christopher Walken</td>
                        <td>0</td>
                      </tr>
                      <tr>
                        <td>The Ref</td>
                        <td>Denis Leary</td>
                        <td>0</td>
                      </tr>
                      <tr>
                        <td>Flyboys</td>
                        <td>James Franco</td>
                        <td>0</td>
                      </tr>
                      <tr>
                        <td>ATL</td>
                        <td>Tip ‘T.I.’ Harris</td>
                        <td>0</td>
                      </tr>
                      <tr>
                        <td>Like a Boss</td>
                        <td>Tiffany Haddish</td>
                        <td>1</td>
                      </tr>
                      <tr>
                        <td>Enemy Mine</td>
                        <td>Dennis Quaid</td>
                        <td>0</td>
                      </tr>
                      <tr>
                        <td>Proud Mary</td>
                        <td>Taraji P. Henson</td>
                        <td>1</td>
                      </tr>
                      <tr>
                        <td>Valmont</td>
                        <td>Colin Firth</td>
                        <td>0</td>
                      </tr>
                    </tbody>
                  </table>
                </table-wrap>
              </fig>
              <p>As displayed in <xref alt="Table 8" rid="tbl-8-nb-article">Table 8</xref>
      the films were split between 488 films with female leading
      actresses and 2328 films with male leading actors.</p>
              <fig id="tbl-8-nb-article">
                <caption>
                  <p>Table 8: Male Versus Female Director
        Counts</p>
                </caption>
                <table-wrap>
                  <table>
                    <thead>
                      <tr>
                        <th>Name</th>
                        <th>Year</th>
                      </tr>
                    </thead>
                    <tbody>
                      <tr>
                        <td>Female Leads</td>
                        <td>488</td>
                      </tr>
                      <tr>
                        <td>Male Leads</td>
                        <td>2328</td>
                      </tr>
                    </tbody>
                  </table>
                </table-wrap>
              </fig>
            </sec>
          </sec>
          <sec id="propensity-score-matching-nb-article">
            <title>3.2 Propensity Score Matching</title>
            <p>With these manufactured variables created, the primary
    statistical analysis performed was propensity score matching (PSM).
    This statistical method allows for comparison of films that are
    similar across all observed covariates, differing only in whether
    the lead is a male or female actor or actress. In this context, the
    presence of a female lead is handled as a treatment, and the effect
    of that treatment on the outcome variable is estimated.</p>
            <p>Unlike simply including covariates as controls in a regression
    equation, this technique aims to reduce selection bias by matching
    treated and control units based on their likelihood of receiving the
    treatment, given the covariates. This creates a more comparable
    dataset, which quasi-mimics the conditions of a randomized
    experiment.</p>
            <p>The process of propensity score matching began with normalizing
    the variables due to the very differing range of values across
    variables like the IMDb rating (which is 0-10) and the budget (which
    can reach hundreds of millions). This was done with Sklearn’s
    StandardScaler scikit-learn developers
    (<xref alt="2025" rid="ref-scikit_learn_standardscaler-nb-article" ref-type="bibr">2025</xref>)
    and performed on all numerical variables.</p>
            <p>Following this step, the variance inflation factor (VIF) was
    checked to investigate any multicollinearity issues among the
    covariates that would bias the analysis. This yielded some
    problematic variables, which resulted in excluding those that
    exceeded the VIF threshold of 10 points. The following variables
    were excluded: international country (domestic country kept), other
    language (English kept), musical genre (all other genre categories
    kept), and accepted MPAA rating (all other MPAA ratings kept).</p>
            <p>Next, a logistic regression was estimated. The variables
    <monospace>metascore</monospace>, <monospace>IMDb votes</monospace>,
    <monospace>TMDb rating</monospace>,
    <monospace>TMDb votes</monospace>,
    <monospace>Oscars Won</monospace>,
    <monospace>Oscars Nominated</monospace>,
    <monospace>Award Wins</monospace>, and
    <monospace>Award Nominations</monospace> were omitted because they
    are ex-post variables, meaning they represent effects of the
    outcomes as opposed to causes of it, thus creating data leakage and
    bias. Therefore, only ex-ante variables are considered. The
    resulting equation is as follows, representing a female leading role
    as the treatment and the film characteristics as covariates:</p>
            <p/>
            <p>The result of this equation is propensity scores (ps) for each
    film title (dataset row), which represent the calculated probability
    of the film having a female leading actress. A score close to 0
    indicates a higher likelihood of the film having a male lead, while
    a score closer to 1 indicates a higher likelihood of a film having a
    female lead. These scores are then used to match, utilizing 1:1
    nearest neighbor matching, the movies across the two groups of
    leading actors/actresses based on the closest propensity score. This
    results in a matched dataset with each row being a matched pair of
    films that are similar in all aspects except for the leading
    role.</p>
            <fig id="tbl-9-nb-article">
              <caption>
                <p>Table 9: Example of Propensity Score Matching Between
      Male and Female Led Films</p>
              </caption>
              <table-wrap>
                <table>
                  <thead>
                    <tr>
                      <th>Female Led Movie</th>
                      <th>PS Female</th>
                      <th>Male Led Movie</th>
                    </tr>
                  </thead>
                  <tbody>
                    <tr>
                      <td>Miss Congeniality</td>
                      <td>0.082866</td>
                      <td>Back to the Future Part III</td>
                    </tr>
                    <tr>
                      <td>GI Jane</td>
                      <td>0.031775</td>
                      <td>Gladiator</td>
                    </tr>
                    <tr>
                      <td>Freaky Friday</td>
                      <td>0.212226</td>
                      <td>The Boat the Rocked</td>
                    </tr>
                    <tr>
                      <td>Kill Bill: Vol. 2</td>
                      <td>0.066924</td>
                      <td>2 Fast 2 Furious</td>
                    </tr>
                  </tbody>
                </table>
              </table-wrap>
            </fig>
            <p>The final step was to calculate and compare the box-office
    performance of matched female versus male lead films. These results
    are discussed in
    <xref alt="Section 4" rid="sec-results-nb-article">Section 4</xref>.</p>
          </sec>
          <sec id="robustness-checks-nb-article">
            <title>3.3 Robustness Checks</title>
            <p>As a robustness check, the <monospace>IMDb rating</monospace>,
    which is a score from 0-10, calculated from a weighted average of
    user ratings on the Internet Movie Database, is utilized as a
    secondary outcome variable. The same methodology of propensity score
    matching is used; however, the analysis now investigates whether a
    female lead role causes a change in the critical success of the
    film.</p>
          </sec>
        </sec>
        <sec id="sec-results-nb-article">
          <title>4 Results</title>
          <fig id="tbl-10-nb-article">
            <caption>
              <p>Table 10: Mean of Box Office and IMDb Rating for Male
    Versus Female Led Films</p>
            </caption>
            <table-wrap>
              <table>
                <thead>
                  <tr>
                    <th>Gender of Lead Role</th>
                    <th>Box Office</th>
                    <th>IMDb Rating</th>
                  </tr>
                </thead>
                <tbody>
                  <tr>
                    <td>Female</td>
                    <td>62,708,871.36</td>
                    <td>6.329</td>
                  </tr>
                  <tr>
                    <td>Male</td>
                    <td>61,076,707.45</td>
                    <td>6.601</td>
                  </tr>
                </tbody>
              </table>
            </table-wrap>
          </fig>
          <sec id="box-office-nb-article">
            <title>4.1 Box Office</title>
            <p>As shown in <xref alt="Table 10" rid="tbl-10-nb-article">Table 10</xref>,
    the initial hypothesis of this research that films featuring a woman
    in the leading role would generate lower box-office revenues was not
    supported by the analysis. In fact, the opposite was found: that
    female films earned an average of $62,708,871, while male films
    earned an average of $61,076,707 in box-office revenues. This means
    that female-led films earned 1,632,163.91 more at the box office on
    average. While the magnitude of the difference is modest compared to
    the average box-office revenue, the matched sample analysis does
    suggest that having a female lead was associated with slightly
    higher box-office performance.</p>
          </sec>
          <sec id="imdb-rating-nb-article">
            <title>4.2 IMDb Rating</title>
            <p>The robustness check, which substituted IMDb rating as the
    outcome variable (also in
    <xref alt="Table 10" rid="tbl-10-nb-article">Table 10</xref>), revealed a
    different pattern. Female-led films had an average IMDb rating of
    6.329, while male-led films had an average of 6.601, a difference of
    -0.272. This indicated that, on average, female-led films received a
    0.272 lower audience rating than male-led films despite their
    slightly better box-office results.</p>
          </sec>
        </sec>
        <sec id="sec-discuss-nb-article">
          <title>5 Discussion</title>
          <p>There are a couple of plausible explanations for the disparity of
  these results. As one explanation, this could be an indication that
  the general public of individuals who partake in film going casually
  have fully accepted female-led films and even enjoy them more.
  However, film critics and individuals who view films more seriously
  are less accepting of women playing large roles in films. Another
  explanation is that women are cast in roles that seemingly lack depth
  and thus are less likely to receive critical success, meaning
  filmmakers are combining women leading roles with less serious script
  material, but still casting them in blockbuster films that draw an
  audience. Furthermore, this could indicate an audience leaning toward
  certain female actresses or female actresses in general, pushing
  box-office numbers higher.</p>
          <p>The analysis, while offering insightful results, still faced some
  limitations. Firstly, there is always room for more data and a larger,
  more encompassing dataset. With a little over 2,000 films, the dataset
  barely scratches the surface of the total filmography possible, and
  more data would allow for more accurate propensity score matching.
  Secondly, the ‘starpower’ metric is quite subjective in that the lists
  of A-listers and B-listers were based on opinions about the actors and
  actresses, instead of some numeric metric. Thirdly, there is a small
  level of inaccuracy with the creation of the female lead variable.
  While the list of actresses utilized was quite large, it was not fully
  encompassing; thus, some actresses were not classified correctly.
  Furthermore, this variable was created solely by splitting the cast
  list and taking the first name, which is not necessarily the lead cast
  member in all cases, and disregards films that have more than one
  leading actor or actress or have an ensemble cast.</p>
          <p>These limitations offer much room for future work. To start, a more
  detailed and objective metric of the ‘starpower’ variable could be
  useful, as this is a huge determinant of the making of a film. This
  could be performed with network analysis of the cast to determine the
  centrality of the actors as a measure of their importance in the
  industry. In addition, classifying the tagline and description based
  on content instead of sentiment could add more depth to the propensity
  scoring. Similarly, a more comprehensive look at the film genres could
  create better matches. This could be done by leveraging an LLM to
  score the film from 0-1 for each genre, indicating how much the film
  falls into that category, instead of weighting each genre listed
  equally. Finally, implementing a different gender-based treatment
  variable could be a telling robustness check. For example, defining
  the treatment as films that pass the Bechdel test could create a more
  accurate look at how gender roles truly impact the outcome of the
  film.</p>
        </sec>
        <sec id="sec-conclusion-nb-article">
          <title>6 Conclusion</title>
          <p>Taken together, the findings offer opposing views of how gender
  matters in the film industry. The box office analysis suggests a
  positive causal relationship between a female in the title role and
  revenue performance, while the IMDb rating analysis suggests a
  negative causal relationship between female leads and audience
  ratings.</p>
          <p>Whatever the underlying reasoning, the differing results underscore
  the complexity of the relationship between gender representation in
  leading roles and measures of film success. This highlights the
  importance of considering multiple outcome variables when assessing
  potential treatment effects, especially when dealing with a topic as
  nuanced as film and entertainment.</p>
        </sec>
        <sec id="references-nb-article">
          <title>References</title>
        </sec>
      </sec>
    </body>
    <back>
      <ref-list>
        <title/>
        <ref id="ref-the_numbers_production_companies-nb-article">
          <element-citation>
            <article-title>Production companies overview</article-title>
            <publisher-name>https://www.the-numbers.com/movies/production-companies/#production_companies_overview=od1</publisher-name>
          </element-citation>
        </ref>
        <ref id="ref-imdb_top_directors-nb-article">
          <element-citation>
            <article-title>IMDb list: Top 25 greatest directors of all time</article-title>
            <publisher-name>https://www.imdb.com/list/ls052380992/</publisher-name>
          </element-citation>
        </ref>
        <ref id="ref-imdb_top_writers-nb-article">
          <element-citation>
            <article-title>IMDb list: Top 20 greatest screenwriters of all time</article-title>
            <publisher-name>https://www.imdb.com/list/ls064457317/</publisher-name>
          </element-citation>
        </ref>
        <ref id="ref-wiki_film_actresses-nb-article">
          <element-citation>
            <article-title>List of american film actresses</article-title>
            <publisher-name>https://en.wikipedia.org/wiki/List_of_American_film_actresses</publisher-name>
          </element-citation>
        </ref>
        <ref id="ref-imdb_a_list_actors-nb-article">
          <element-citation>
            <article-title>IMDb a-list actors</article-title>
            <publisher-name>https://www.imdb.com/list/ls056262001/</publisher-name>
          </element-citation>
        </ref>
        <ref id="ref-imdb_a_list_actresses-nb-article">
          <element-citation>
            <article-title>IMDb a-list actresses</article-title>
            <publisher-name>https://www.imdb.com/list/ls056262192/</publisher-name>
          </element-citation>
        </ref>
        <ref id="ref-imdb_b_list-nb-article">
          <element-citation>
            <article-title>IMDb b-list actors and actresses</article-title>
            <publisher-name>https://www.imdb.com/list/ls024783564/</publisher-name>
          </element-citation>
        </ref>
        <ref id="ref-distilbert_sst2_hf-nb-article">
          <element-citation>
            <person-group person-group-type="author">
              <name>
                <surname>Face</surname>
                <given-names>Hugging</given-names>
              </name>
            </person-group>
            <article-title>Distilbert-base-uncased-finetuned-sst-2-english</article-title>
            <publisher-name>https://huggingface.co/distilbert/distilbert-base-uncased-finetuned-sst-2-english</publisher-name>
          </element-citation>
        </ref>
        <ref id="ref-scikit_learn_standardscaler-nb-article">
          <element-citation>
            <person-group person-group-type="author">
              <string-name>scikit-learn developers</string-name>
            </person-group>
            <article-title>StandardScaler — scikit-learn 1.7.1 documentation</article-title>
            <publisher-name>https://scikit-learn.org/stable/modules/generated/sklearn.preprocessing.StandardScaler.html</publisher-name>
            <year iso-8601-date="2025">2025</year>
          </element-citation>
        </ref>
        <ref id="ref-science_cinema_history-nb-article">
          <element-citation>
            <person-group person-group-type="author">
              <string-name>National Science and Media Museum</string-name>
            </person-group>
            <article-title>A very short history of cinema</article-title>
            <publisher-name>https://www.scienceandmediamuseum.org.uk/objects-and-stories/very-short-history-of-cinema</publisher-name>
            <year iso-8601-date="2020">2020</year>
          </element-citation>
        </ref>
        <ref id="ref-statista_film-nb-article">
          <element-citation>
            <person-group person-group-type="author">
              <name>
                <surname>Statista</surname>
              </name>
            </person-group>
            <article-title>Film production worldwide - statista topic overview</article-title>
            <publisher-name>https://www.statista.com/topics/5431/film-production-worldwide/</publisher-name>
          </element-citation>
        </ref>
      </ref-list>
    </back>
  </sub-article>
  <sub-article article-type="notebook" id="nb-3-nb-1">
    <front-stub>
      <title-group>
        <article-title>Data Preprocessing</article-title>
      </title-group>
    </front-stub>
    <body>
      <sec id="cell-1e0508f8-nb-1" specific-use="notebook-content">
        <code language="python">import pandas as pd
import numpy as np

# reading in the movies dataset
movies_df = pd.read_csv("../data/output_data/combined_movies.csv")</code>
      </sec>
      <sec id="b2c04d28-nb-1" specific-use="notebook-content">
        <code language="python"># removing the first row
movies_df = movies_df.iloc[1:]</code>
      </sec>
      <sec id="cell-634b0469-nb-1" specific-use="notebook-content">
        <code language="python"># dropping unnecessary columns: Poster URL and Overview
movies_df = movies_df.drop(columns=["Poster URL", "Overview"])</code>
      </sec>
      <sec id="cell-520b0932-nb-1" specific-use="notebook-content">
        <code language="python"># dropping missing values
movies_df = movies_df.dropna()

# dropping zeros (budget and revenue)
movies_df = movies_df[(movies_df["Budget"] != 0) &amp; (movies_df["Revenue"] != 0)]</code>
      </sec>
      <sec id="a8f0b703-nb-1" specific-use="notebook-content">
        <code language="python"># converting runtime to numeric
movies_df["Runtime"] = movies_df["Runtime"].str.replace(" min", "").astype(int)</code>
      </sec>
      <sec id="d1eb2ea0-nb-1" specific-use="notebook-content">
        <code language="python"># splitting the released date into year, month, and day
movies_df["Released"] = pd.to_datetime(movies_df["Released"], errors='coerce')
movies_df["Year"] = movies_df["Released"].dt.year
movies_df["Month"] = movies_df["Released"].dt.month
movies_df["Day"] = movies_df["Released"].dt.day

# dropping the original Released column
movies_df = movies_df.drop(columns=["Released"])</code>
      </sec>
      <sec id="aaa94c69-nb-1" specific-use="notebook-content">
        <code language="python"># making the genre column one-hot encoded
genre_dummies = movies_df["Genre"].str.get_dummies(sep=', ')
movies_df = pd.concat([movies_df, genre_dummies], axis=1)

# dropping the original genre column
movies_df = movies_df.drop(columns=["Genre"])</code>
      </sec>
      <sec id="c0fbe507-nb-1" specific-use="notebook-content">
        <code language="python"># making the MPAA rating one-hot encoded
mpaa_dummies = movies_df["Rated"].str.get_dummies(sep=', ')
movies_df = pd.concat([movies_df, mpaa_dummies], axis=1)

# dropping the original MPAA rating column
movies_df = movies_df.drop(columns=["Rated"])</code>
      </sec>
      <sec id="cell-7e713706-nb-1" specific-use="notebook-content">
        <code language="python"># creating variable that indicates the movie was made by a big production company
companies = ["Universal Pictures", "Paramount Pictures", "Warner Bros. Pictures", "Walt Disney Pictures", "Walt Disney Feature Animation", "Sony Pictures", "Universal Pictures", "20th Century Fox", "Columbia Pictures", "Lionsgate", "Metro-Goldwyn-Mayer", "Marvel Studios", "Pixar Animation Studios", "DreamWorks Animation", "DreamWorks Pictures", "New Line Cinema", "Focus Features", "Orion Pictures", "United Artists", "A24", "Searchlight Pictures"]
movies_df["Top_Production_Company"] = movies_df["Production Companies"].apply(lambda x: int(any(company in x for company in companies)))

# dropping the original Production Companies column
movies_df = movies_df.drop(columns=["Production Companies"])</code>
      </sec>
      <sec id="b71d92dd-nb-1" specific-use="notebook-content">
        <code language="python"># creaing variable that indicates the movie was directed by top 25 director
top_directors = ["Steven Spielberg", "James Cameron", "Russo brohters", "Peter Jackson", "Michael Bay", "David Yates", "Christopher Nolan", "Ridley Scott", "Tim Burton", "J.J. Abrams", "Ron Howard", "Robert Zemeckis", "Jon Favreau", "Sam Raimi", "James Wan", "Chris Columbus", "Roland Emmerich", "Jon Watts", "Gore Verbinski", "Bryan Singer", "Pierre Coffin", "Francis Lawrence", "Clint Eastwood", "George Lucas", "Brad Bird", "M. Night Shyamalan", "Todd Phillips", "Chris Renaud", "Zack Snyder", "Kyle Balda"]
movies_df["Top_Director"] = movies_df["Director"].apply(lambda x: int(any(director in x for director in top_directors)))

# dropping the original Director column
movies_df = movies_df.drop(columns=["Director"])</code>
      </sec>
      <sec id="eb698d06-nb-1" specific-use="notebook-content">
        <code language="python"># creaing variable that indicates the movie was written by top 20 writer

# splitting the column and keeping only the first writer
movies_df["Writer"] = movies_df["Writer"].str.split(',').str[0]


top_writers =  ["Aaron Sorkin", "Quentin Tarantino", "Woody Allen", "Billy Wilder", "Joel Coen", "Ethan Coen", "Oliver Stone", "William Goldman", "Steven Zaillian", "James Cameron", "Mel Brooks", "Paul Schrader", "Ingmar Bergman", "Lawrence Kasdan", "Eric Roth", "Alan Ball", "Paul Thomas Anderson", "Walter Hill", "John Hughes", "David Lynch"]
movies_df["Top_Writer"] = movies_df["Writer"].apply(lambda x: int(any(writer in x for writer in top_writers)))

# dropping the original Director column
movies_df = movies_df.drop(columns=["Writer"])</code>
      </sec>
      <sec id="cell-2653e0f7-nb-1" specific-use="notebook-content">
        <code language="python"># converting text variables to strings

movies_df["Title"] = movies_df["Title"].astype("string")
movies_df["Actors"] = movies_df["Actors"].astype("string")
movies_df["Description"] = movies_df["Description"].astype("string")
movies_df["Tagline"] = movies_df["Tagline"].astype("string")</code>
      </sec>
      <sec id="e2fe4850-nb-1" specific-use="notebook-content">
        <code language="python"># convering IMDB votes to numeric
movies_df["IMDB Votes"] = movies_df["IMDB Votes"].str.replace(",", "").astype(int)</code>
      </sec>
      <sec id="cell-4ea508c8-nb-1" specific-use="notebook-content">
        <code language="python"># converting box office to numeric
movies_df["Box Office"] = movies_df["Box Office"].str.replace("<!-- (F2ED4C6E)[nb-1]:/Users/lizziehealy/Desktop/DSAN_5650/Matching_Movies/notebooks/data_clean.ipynb -->quot;, "").str.replace(",", "").astype(float)</code>
      </sec>
      <sec id="be2558ff-nb-1" specific-use="notebook-content">
        <code language="python"># splitting the column and keeping only the first language
movies_df["Country"] = movies_df["Country"].str.split(',').str[0]

# creating variable that indicates the movie was made in English
movies_df["Domestic"] = movies_df["Country"].apply(lambda x: int(x == "United States"))
# variable that indicates the movie was made in other language
movies_df["International"] = movies_df["Country"].apply(lambda x: int(x != "United States"))

# dropping the original country column
movies_df = movies_df.drop(columns=["Country"])</code>
      </sec>
      <sec id="d5b7fc33-nb-1" specific-use="notebook-content">
        <code language="python"># splitting the column and keeping only the first language
movies_df["Language"] = movies_df["Language"].str.split(',').str[0]

# creating variable that indicates the movie was made in English
movies_df["English_Language"] = movies_df["Language"].apply(lambda x: int(x == "English"))
# variable that indicates the movie was made in other language
movies_df["Other_Language"] = movies_df["Language"].apply(lambda x: int(x != "English"))

# dropping the original country column
movies_df = movies_df.drop(columns=["Language"])</code>
      </sec>
      <sec id="cell-8912830a-nb-1" specific-use="notebook-content">
        <code language="python">import re

# converting the awards column to numeric
movies_df["Oscars_Won"] = 0
movies_df["Oscars_Nominated"] = 0
movies_df["Wins"] = 0
movies_df["Nominations"] = 0

# extracting the wins/nominations
for i, row in movies_df.iterrows():
    text = row["Awards"]

    # oscars
    won_oscar = re.search(r"Won (\d+) Oscar", text)
    nom_oscar = re.search(r"Nominated for (\d+) Oscar", text)
    if won_oscar:
        movies_df.at[i, "Oscars_Won"] = int(won_oscar.group(1))
    if nom_oscar:
        movies_df.at[i, "Oscars_Nominated"] = int(nom_oscar.group(1))

    # wins
    wins = re.search(r"(\d+) wins?", text)
    if wins:
        movies_df.at[i, "Wins"] = int(wins.group(1))

    # nominations
    noms = re.search(r"(\d+) nominations?", text)
    if noms:
        movies_df.at[i, "Nominations"] = int(noms.group(1))

# dropping the original Awards column
movies_df = movies_df.drop(columns=["Awards"])</code>
      </sec>
      <sec id="cell-10452cb0-nb-1" specific-use="notebook-content">
        <code language="python"># check data types
print(movies_df.dtypes[:10])
print(movies_df.dtypes[10:20])
print(movies_df.dtypes[20:24])</code>
        <boxed-text>
          <preformat>Title          string[python]
Year                    int32
Runtime                 int64
Actors         string[python]
IMDB Rating           float64
Metascore             float64
IMDB Votes              int64
Box Office            float64
Description    string[python]
Tagline        string[python]
dtype: object
Budget           int64
Revenue          int64
TMDB Rating    float64
Vote Count       int64
Month            int32
Day              int32
Action           int64
Adventure        int64
Animation        int64
Biography        int64
dtype: object
Comedy         int64
Crime          int64
Documentary    int64
Drama          int64
dtype: object</preformat>
        </boxed-text>
      </sec>
      <sec id="da5b34d0-nb-1" specific-use="notebook-content">
        <code language="python">movies = len(movies_df)
print("Number of movies:", movies)</code>
        <boxed-text>
          <preformat>Number of movies: 2816</preformat>
        </boxed-text>
      </sec>
      <sec id="cell-0a020623-nb-1" specific-use="notebook-content">
        <code language="python"># check number of columns
columns = len(movies_df.columns)
print("Number of columns:", columns)</code>
        <boxed-text>
          <preformat>Number of columns: 61</preformat>
        </boxed-text>
      </sec>
      <sec id="cell-2c95bdf0-nb-1" specific-use="notebook-content">
        <code language="python">movies_df.to_csv("../data/output_data/clean_movies.csv", index=False)</code>
      </sec>
      <sec id="cell-72d82e54-nb-1" specific-use="notebook-content">
        <sec id="eda-nb-1">
          <title>EDA</title>
        </sec>
        <sec id="cell-0c8e359b-nb-1" specific-use="notebook-content">
          <code language="python">import matplotlib.pyplot as plt
import seaborn as sns
import pandas as pd

# reading in the cleaned movies dataset
movies_df = pd.read_csv("../data/output_data/clean_movies.csv")</code>
        </sec>
        <sec id="cell-41c36fe8-nb-1" specific-use="notebook-content">
          <code language="python"># histogram of IMDb ratings
imdb = movies_df['IMDB Rating']

plt.figure(figsize=(8, 5))
sns.histplot(imdb, bins=20, edgecolor='black')
plt.xlabel('IMDB Rating')
plt.ylabel('Number of Movies')
plt.title('Distribution of IMDB Ratings')
plt.savefig('./notebook_output/imdb_rating.png')
plt.show()</code>
          <boxed-text>
            <graphic mimetype="image" mime-subtype="png" xlink:href="data_clean_files/figure-jats/cell-24-output-1.png"/>
          </boxed-text>
        </sec>
        <sec id="cell-76c6d4e0-nb-1" specific-use="notebook-content">
          <code language="python"># summary statistics for numerical variables
# getting the min, mean, max, and std dev
print("Box Office Statistics:")
print("Min:", movies_df["Box Office"].min())
print("Mean:", movies_df["Box Office"].mean())
print("Max:", movies_df["Box Office"].max())
print("Std Dev:", movies_df["Box Office"].std())

print("\nBudget Statistics:")
print("Min:", movies_df["Budget"].min())
print("Mean:", movies_df["Budget"].mean())
print("Max:", movies_df["Budget"].max())
print("Std Dev:", movies_df["Budget"].std())

print("\nIMDB Rating Statistics:")
print("Min:", movies_df["IMDB Rating"].min())
print("Mean:", movies_df["IMDB Rating"].mean())
print("Max:", movies_df["IMDB Rating"].max())
print("Std Dev:", movies_df["IMDB Rating"].std())

print("\nIMDB Votes Statistics:")
print("Min:", movies_df["IMDB Votes"].min())
print("Mean:", movies_df["IMDB Votes"].mean())
print("Max:", movies_df["IMDB Votes"].max())
print("Std Dev:", movies_df["IMDB Votes"].std())

print("\nRuntime Statistics:")
print("Min:", movies_df["Runtime"].min())
print("Mean:", movies_df["Runtime"].mean())
print("Max:", movies_df["Runtime"].max())
print("Std Dev:", movies_df["Runtime"].std())</code>
          <boxed-text>
            <preformat>Box Office Statistics:
Min: 3622.0
Mean: 73753531.26740056
Max: 858373000.0
Std Dev: 88133798.11221693

Budget Statistics:
Min: 7000
Mean: 49601710.70170455
Max: 460000000
Std Dev: 54138962.49989549

IMDB Rating Statistics:
Min: 1.9
Mean: 6.6998224431818185
Max: 9.3
Std Dev: 0.9045356229312045

IMDB Votes Statistics:
Min: 1672
Mean: 222006.69282670456
Max: 3059994
Std Dev: 284492.17231449694

Runtime Statistics:
Min: 63
Mean: 113.29225852272727
Max: 238
Std Dev: 20.602561285492758</preformat>
          </boxed-text>
        </sec>
        <sec id="eaca791c-nb-1" specific-use="notebook-content">
          <code language="python"># time series plot of IMDb ratings
plt.figure(figsize=(10, 6))
sns.lineplot(x=movies_df['Year'], y=movies_df['IMDB Rating'])
plt.xlabel('Year')
plt.ylabel('Average IMDB Rating')
plt.title('IMDB Rating Over Time')
plt.tight_layout()
plt.savefig('./notebook_output/imdb_overtime.png')
plt.show()</code>
          <boxed-text>
            <graphic mimetype="image" mime-subtype="png" xlink:href="data_clean_files/figure-jats/cell-26-output-1.png"/>
          </boxed-text>
        </sec>
        <sec id="cell-5aa783fb-nb-1" specific-use="notebook-content">
          <code language="python"># time series plot of box office
plt.figure(figsize=(10, 6))
sns.lineplot(x=movies_df['Year'], y=movies_df['Box Office'])
plt.xlabel('Year')
plt.ylabel('Average Box Office')
plt.title('Box Office Over Time')
plt.tight_layout()
plt.savefig('./notebook_output/boxoffice_overtime.png')
plt.show()</code>
          <boxed-text>
            <graphic mimetype="image" mime-subtype="png" xlink:href="data_clean_files/figure-jats/cell-27-output-1.png"/>
          </boxed-text>
        </sec>
        <sec id="cell-18de7c77-nb-1" specific-use="notebook-content">
          <code language="python"># getting the count of movies per genre
genre_columns = [
    'Action', 'Adventure', 'Animation', 'Biography', 'Comedy', 'Crime', 'Documentary',
    'Drama', 'Family', 'Fantasy', 'Film-Noir', 'History', 'Horror', 'Music', 'Musical',
    'Mystery', 'Romance', 'Sci-Fi', 'Sport', 'Thriller', 'War', 'Western'
]
genre_counts = movies_df[genre_columns].sum().sort_values(ascending=False)

# bar plot of number of movies per genre
plt.figure(figsize=(12, 6))
sns.barplot(x=genre_counts.index, y=genre_counts.values, palette='viridis')
plt.xticks(rotation=45)
plt.xlabel('Genre')
plt.ylabel('Number of Movies')
plt.title('Number of Movies per Genre')
plt.tight_layout()
plt.savefig('./notebook_output/genre_counts.png')
plt.show()</code>
          <boxed-text>
            <preformat>/var/folders/f7/px3ynpyn7l3g5j59yyvbggrw0000gn/T/ipykernel_26680/512217231.py:10: FutureWarning: 

Passing `palette` without assigning `hue` is deprecated and will be removed in v0.14.0. Assign the `x` variable to `hue` and set `legend=False` for the same effect.

  sns.barplot(x=genre_counts.index, y=genre_counts.values, palette='viridis')</preformat>
          </boxed-text>
          <boxed-text>
            <graphic mimetype="image" mime-subtype="png" xlink:href="data_clean_files/figure-jats/cell-28-output-2.png"/>
          </boxed-text>
        </sec>
        <sec id="d2d1e2f0-nb-1" specific-use="notebook-content">
          <code language="python"># list of MPAA rating columns
rated_columns = [
    'Approved', 'G', 'GP', 'M', 'M/PG', 'NC-17', 'Not Rated', 'PG', 'PG-13', 'R', 'TV-MA', 'Unrated'
]
rated_counts = movies_df[rated_columns].sum().sort_values(ascending=False)

# bar plot of number of movies per MPAA rating
plt.figure(figsize=(10, 5))
sns.barplot(x=rated_counts.index, y=rated_counts.values, palette='mako')
plt.xlabel('MPAA Rating')
plt.ylabel('Number of Movies')
plt.title('Number of Movies per MPAA Rating')
plt.tight_layout()
plt.savefig('./notebook_output/rated_counts.png')
plt.show()
  </code>
          <boxed-text>
            <preformat>/var/folders/f7/px3ynpyn7l3g5j59yyvbggrw0000gn/T/ipykernel_26680/1077380503.py:8: FutureWarning: 

Passing `palette` without assigning `hue` is deprecated and will be removed in v0.14.0. Assign the `x` variable to `hue` and set `legend=False` for the same effect.

  sns.barplot(x=rated_counts.index, y=rated_counts.values, palette='mako')</preformat>
          </boxed-text>
          <boxed-text>
            <graphic mimetype="image" mime-subtype="png" xlink:href="data_clean_files/figure-jats/cell-29-output-2.png"/>
          </boxed-text>
        </sec>
        <sec id="c9d254a4-nb-1" specific-use="notebook-content">
          <code language="python"># pie chart of number of movies per MPAA rating
main_ratings = ['PG', 'PG-13', 'G', 'R']
grouped_counts = rated_counts.copy()

# summing all "other" ratings
other_count = grouped_counts[~grouped_counts.index.isin(main_ratings)].sum()

# keeping only main ratings and add "Other"
grouped_counts = grouped_counts[main_ratings]
grouped_counts['Other'] = other_count

plt.figure(figsize=(8, 8))
plt.pie(grouped_counts, labels=grouped_counts.index, autopct='%1.1f%%', startangle=140, colors=sns.color_palette('mako', len(grouped_counts)))
plt.title('Distribution of MPAA Ratings (Grouped)')
plt.tight_layout()
plt.savefig('./notebook_output/mpaa_pie.png')
plt.show()</code>
          <boxed-text>
            <graphic mimetype="image" mime-subtype="png" xlink:href="data_clean_files/figure-jats/cell-30-output-1.png"/>
          </boxed-text>
        </sec>
      </sec>
    </body>
    <back>
</back>
  </sub-article>
  <sub-article article-type="notebook" id="nb-6-nb-2">
    <front-stub>
      <title-group>
        <article-title>Collecting the Data</article-title>
      </title-group>
    </front-stub>
    <body>
      <sec id="cell-2-nb-2" specific-use="notebook-content">
        <sec id="collecting-the-omdb-data-nb-2">
          <title>Collecting the OMDb Data</title>
        </sec>
        <sec id="cell-3-nb-2" specific-use="notebook-content">
          <code language="python">import requests
import json
import csv

# loading API key from a JSON file
with open('../api_key.json') as f:
    keys = json.load(f)
OMDB_KEY = keys['OMDB_key']</code>
        </sec>
        <sec id="cell-4-nb-2" specific-use="notebook-content">
          <code language="python"># setting input and output file names
input_file = "../data/input_data/file_1.csv" # file containing the list of movies
output_file = "../data/output_data/OMDB/movies_O.csv"  # new file with movie details

START_INDEX = 0
BATCH_SIZE = 5000   # number of movies to process in each run

# reading all movie titles from the input CSV file
with open(input_file, mode="r", encoding="utf-8") as infile:
    reader = csv.reader(infile)
    movie_titles = [row[0] for row in reader]  # assuming titles are in the first column

# getting subset of movies to process in batch
movies_to_process = movie_titles[START_INDEX:START_INDEX + BATCH_SIZE]

# adding data to ouput file
with open(output_file, mode="a", newline="", encoding="utf-8") as outfile:
    writer = csv.writer(outfile)

    if START_INDEX == 0:  # only add headers on the first run
        writer.writerow([
            "Title", "Year", "Released", "Genre", "Runtime", "Director", "Writer", "Actors",
            "Rated", "IMDB Rating", "Metascore", "IMDB Votes", "Awards", "Box Office",
            "Country", "Language", "Description", "Poster URL"
        ])

    for movie_title in movies_to_process:
        url = f"http://www.omdbapi.com/?t={movie_title}&amp;apikey={OMDB_KEY}&amp;plot=full"
        response = requests.get(url)

        if response.status_code == 200: # check request worked
            movie_data = response.json()

            if movie_data['Response'] == 'True':
                # getting the movie details
                writer.writerow([
                    movie_data.get('Title', 'N/A'),
                    movie_data.get('Year', 'N/A'),
                    movie_data.get('Released', 'N/A'),
                    movie_data.get('Genre', 'N/A'),
                    movie_data.get('Runtime', 'N/A'),
                    movie_data.get('Director', 'N/A'),
                    movie_data.get('Writer', 'N/A'),
                    movie_data.get('Actors', 'N/A'),
                    movie_data.get('Rated', 'N/A'),
                    movie_data.get('imdbRating', 'N/A'),
                    movie_data.get('Metascore', 'N/A'),
                    movie_data.get('imdbVotes', 'N/A'),
                    movie_data.get('Awards', 'N/A'),
                    movie_data.get('BoxOffice', 'N/A'),
                    movie_data.get('Country', 'N/A'),
                    movie_data.get('Language', 'N/A'),
                    movie_data.get('Plot', 'N/A'),
                    movie_data.get('Poster', 'N/A')
                ])
            else:
                print(f"Movie not found: {movie_title}")
        else:
            print(f"Failed to fetch data for: {movie_title}")

print(f"Processed {len(movies_to_process)} movies. Data saved to {output_file}")</code>
          <boxed-text>
            <preformat>Movie not found: Den of Thieves 2: Pantera
Movie not found: 9Â½ Weeks
Movie not found: Now You See Me 3
Movie not found: Wicked: Part Two
Movie not found: Wicked: Part I
Failed to fetch data for: Juror #2
Movie not found: The Naked Gun 2Â½: The Smell of Fear
Movie not found: Indiana Jones and the Raiders of the Lost Ark
Movie not found: Levon's Trade
Movie not found: Big Stan
Movie not found: Another 9Â½ Weeks
Movie not found: Biohazard: Death Island
Failed to fetch data for: #FamilyMan
Movie not found: The ProtÃ©gÃ©
Movie not found: Welcome To Holland
Processed 5000 movies. Data saved to ../data/output_data/OMDB/movies_O.csv</preformat>
          </boxed-text>
        </sec>
        <sec id="cell-5-nb-2" specific-use="notebook-content">
</sec>
        <sec id="collecting-the-tmbd-data-nb-2">
          <title>Collecting the TMBD Data</title>
        </sec>
        <sec id="cell-6-nb-2" specific-use="notebook-content">
          <code language="python"># loading the TMDb API key from the JSON file
with open('../api_key.json') as f:
    keys = json.load(f)
TMDB_KEY = keys['TMDB_key']</code>
        </sec>
        <sec id="cell-7-nb-2" specific-use="notebook-content">
          <code language="python"># setting input and output file names
input_file = "../data/input_data/file_1.csv"         # file containing the list of movies
output_file = "../data/output_data/TMDB/movies_T.csv"  # new file with movie details

START_INDEX = 0 
BATCH_SIZE = 5000   # number of movies to process in each run

# reading all movie titles from the input CSV file
with open(input_file, mode="r", encoding="utf-8") as infile:
    reader = csv.reader(infile)
    movie_titles = [row[0] for row in reader]  # assuming titles are in the first column

# getting subset of movies to process in batch
movies_to_process = movie_titles[START_INDEX:START_INDEX + BATCH_SIZE]

# adding data to ouput file
with open(output_file, mode="a", newline="", encoding="utf-8") as outfile:
    writer = csv.writer(outfile)

    if START_INDEX == 0:  # only add headers on the first run
        writer.writerow([
            "Title", "Tagline", "Overview", "Budget", "Revenue", "TMDB Rating", "Vote Count", "Production Companies"
        ])

    for movie_title in movies_to_process:
        # search for the movie by title
        search_url = "https://api.themoviedb.org/3/search/movie"
        params = {"api_key": TMDB_KEY, "query": movie_title}
        search_response = requests.get(search_url, params=params)

        if search_response.status_code == 200 and search_response.json()["results"]:
            movie_id = search_response.json()["results"][0]["id"]

            # getting the movie details
            details_url = f"https://api.themoviedb.org/3/movie/{movie_id}"
            details_params = {"api_key": TMDB_KEY}
            details_response = requests.get(details_url, params=details_params)

            if details_response.status_code == 200:
                data = details_response.json()

                title = data.get("title", "N/A")
                tagline = data.get("tagline", "N/A")
                overview = data.get("overview", "N/A")
                budget = data.get("budget", "N/A")
                revenue = data.get("revenue", "N/A")
                vote_average = data.get("vote_average", "N/A")
                vote_count = data.get("vote_count", "N/A")
                production_companies = ", ".join([c["name"] for c in data.get("production_companies", [])])

                writer.writerow([
                    title,
                    tagline,
                    overview,
                    budget,
                    revenue,
                    vote_average,
                    vote_count,
                    production_companies
                ])

                print(f"✓ Processed: {movie_title}")
            else:
                print(f"✗ Failed to get details for: {movie_title}")
        else:
            print(f"✗ Movie not found: {movie_title}")

print(f"Processed {len(movies_to_process)} movies.")</code>
        </sec>
        <sec id="cell-8-nb-2" specific-use="notebook-content">
</sec>
        <sec id="combining-both-the-datasets-nb-2">
          <title>Combining both the datasets</title>
        </sec>
        <sec id="cell-9-nb-2" specific-use="notebook-content">
          <code language="python">import pandas as pd

# reading both files
OMDB_movies = pd.read_csv("../data/output_data/OMDB/movies_O.csv")
TMDB_movies = pd.read_csv("../data/output_data/TMDB/movies_T.csv")

# merging on the movie title
merged_df = pd.merge(OMDB_movies, TMDB_movies, on="Title")

# exporting merged csv
merged_df.to_csv("../data/output_data/combined_movies.csv", index=False)</code>
        </sec>
        <sec id="cell-10-nb-2" specific-use="notebook-content">
</sec>
        <sec id="exploring-the-collected-data-nb-2">
          <title>Exploring the Collected Data</title>
        </sec>
        <sec id="cell-11-nb-2" specific-use="notebook-content">
          <code language="python">import pandas as pd
import numpy as np

# reading in the combined data
movies_df = pd.read_csv("../data/output_data/combined_movies.csv")</code>
        </sec>
        <sec id="cell-12-nb-2" specific-use="notebook-content">
          <code language="python"># looking at the variables
variables = movies_df.columns
print("Features of the movie:", variables.values)</code>
          <boxed-text>
            <preformat>Features of the movie: ['Title' 'Year' 'Released' 'Genre' 'Runtime' 'Director' 'Writer' 'Actors'
 'Rated' 'IMDB Rating' 'Metascore' 'IMDB Votes' 'Awards' 'Box Office'
 'Country' 'Language' 'Description' 'Poster URL' 'Tagline' 'Overview'
 'Budget' 'Revenue' 'TMDB Rating' 'Vote Count' 'Production Companies']</preformat>
          </boxed-text>
        </sec>
        <sec id="cell-13-nb-2" specific-use="notebook-content">
          <code language="python"># getting the min and max year of the movies
# keeping only 1984 to 2024
movies_df['Year'] = pd.to_numeric(movies_df['Year'], errors='coerce')
movies_df = movies_df[(movies_df['Year'] &gt;= 1984) &amp; (movies_df['Year'] &lt;= 2024)]

years = movies_df['Year']
min_year = np.min(years)
max_year = np.max(years)
print("Earlist film year:", min_year)
print("Most recent film year:", max_year)</code>
          <boxed-text>
            <preformat>Earlist film year: 1984.0
Most recent film year: 2024.0</preformat>
          </boxed-text>
        </sec>
        <sec id="cell-14-nb-2" specific-use="notebook-content">
          <code language="python"># seeing how many movies are in the data
movies = len(movies_df)
print("Number of movies:", movies)</code>
          <boxed-text>
            <preformat>Number of movies: 4110</preformat>
          </boxed-text>
        </sec>
      </sec>
    </body>
    <back>
</back>
  </sub-article>
  <sub-article article-type="notebook" id="nb-9-nb-3">
    <front-stub>
      <title-group>
        <article-title>Propensity Score Matching</article-title>
      </title-group>
    </front-stub>
    <body>
      <sec id="cell-12d9800f-nb-3" specific-use="notebook-content">
        <code language="python">import pandas as pd
import numpy as np

# reading in the combined movies with starpower, sentiment, and female-lead
movies_df = pd.read_csv("../data/output_data/clean_movies_sent_fem_star.csv")

print(movies_df.head(5))

# renaming columns for consistency
movies_df.rename(columns={
    'Film-Noir': 'Film_Noir',
    'Sci-Fi': 'Sci_Fi',
    'M/PG': 'M_PG',
    'NC-17': 'NC_17',
    'Not Rated': 'Not_Rated',
    'PG-13': 'PG_13',
    'TV-MA': 'TV_MA',
    'IMDB Rating': 'IMDB_Rating',
    'IMDB Votes': 'IMDB_Votes',
    'TMDB Rating': 'TMDB_Rating',
    'Vote Count': 'Vote_Count',
}, inplace=True)</code>
        <boxed-text>
          <preformat>                      Title  Year  Runtime  IMDB Rating  Metascore  \
0             Four Brothers  2005      109          6.8       49.0   
1  The Adventures of Tintin  2011      107          7.3       68.0   
2             Green Lantern  2011      114          5.5       39.0   
3           The Beastmaster  1982      118          6.2       18.0   
4        Kong: Skull Island  2017      118          6.7       62.0   

   IMDB Votes   Box Office     Budget    Revenue  TMDB Rating  ...  \
0      164844   74494381.0   45000000   92374674        6.800  ...   
1      249784   77591831.0  130000000  373993951        6.905  ...   
2      304201  116601172.0  200000000  219851172        5.174  ...   
3       26055   14056528.0    8000000   14056528        6.300  ...   
4      362341  168052812.0  185000000  566652812        6.547  ...   

   English_Language  Other_Language  Oscars_Won  Oscars_Nominated  Wins  \
0                 1               0           0                 0     5   
1                 1               0           0                 1    22   
2                 1               0           0                 0     3   
3                 1               0           0                 0     1   
4                 1               0           0                 1     1   

   Nominations  Descr_Sentiment  Tagline_Sentiment  Female_Lead  starpower  
0            9                0                  0            0   0.666667  
1           63                0                  1            0   1.333333  
2            6                1                  1            0   0.333333  
3            2                1                  1            0   0.000000  
4           22                1                  1            0   1.000000  

[5 rows x 62 columns]</preformat>
        </boxed-text>
      </sec>
      <sec id="cell-98daf0ee-nb-3" specific-use="notebook-content">
        <code language="python"># checking the cross tabulation
pd.crosstab(movies_df['Female_Lead'], movies_df['Box Office'])</code>
        <boxed-text>
          <table-wrap>
            <table border="1">
              <thead>
                <tr style="text-align: right;">
                  <th>Box Office</th>
                  <th>3622.0</th>
                  <th>5073.0</th>
                  <th>7856.0</th>
                  <th>9221.0</th>
                  <th>13302.0</th>
                  <th>15071.0</th>
                  <th>15709.0</th>
                  <th>18180.0</th>
                  <th>18612.0</th>
                  <th>19181.0</th>
                  <th>...</th>
                  <th>636238421.0</th>
                  <th>652980194.0</th>
                  <th>674354882.0</th>
                  <th>678815482.0</th>
                  <th>684075767.0</th>
                  <th>700426566.0</th>
                  <th>718732821.0</th>
                  <th>785221649.0</th>
                  <th>814866759.0</th>
                  <th>858373000.0</th>
                </tr>
                <tr>
                  <th>Female_Lead</th>
                  <th/>
                  <th/>
                  <th/>
                  <th/>
                  <th/>
                  <th/>
                  <th/>
                  <th/>
                  <th/>
                  <th/>
                  <th/>
                  <th/>
                  <th/>
                  <th/>
                  <th/>
                  <th/>
                  <th/>
                  <th/>
                  <th/>
                  <th/>
                  <th/>
                </tr>
              </thead>
              <tbody>
                <tr>
                  <td>0</td>
                  <td>1</td>
                  <td>1</td>
                  <td>1</td>
                  <td>1</td>
                  <td>0</td>
                  <td>0</td>
                  <td>1</td>
                  <td>1</td>
                  <td>1</td>
                  <td>1</td>
                  <td>...</td>
                  <td>1</td>
                  <td>0</td>
                  <td>1</td>
                  <td>1</td>
                  <td>1</td>
                  <td>1</td>
                  <td>1</td>
                  <td>1</td>
                  <td>1</td>
                  <td>1</td>
                </tr>
                <tr>
                  <td>1</td>
                  <td>0</td>
                  <td>0</td>
                  <td>0</td>
                  <td>0</td>
                  <td>1</td>
                  <td>1</td>
                  <td>0</td>
                  <td>0</td>
                  <td>0</td>
                  <td>0</td>
                  <td>...</td>
                  <td>0</td>
                  <td>1</td>
                  <td>0</td>
                  <td>0</td>
                  <td>0</td>
                  <td>0</td>
                  <td>0</td>
                  <td>0</td>
                  <td>0</td>
                  <td>0</td>
                </tr>
              </tbody>
            </table>
          </table-wrap>
        </boxed-text>
      </sec>
      <sec id="d8e550a7-nb-3" specific-use="notebook-content">
        <code language="python"># checking the column names
print(movies_df.columns)</code>
        <boxed-text>
          <preformat>Index(['Title', 'Year', 'Runtime', 'IMDB_Rating', 'Metascore', 'IMDB_Votes',
       'Box Office', 'Budget', 'Revenue', 'TMDB_Rating', 'Vote_Count', 'Month',
       'Day', 'Action', 'Adventure', 'Animation', 'Biography', 'Comedy',
       'Crime', 'Documentary', 'Drama', 'Family', 'Fantasy', 'Film_Noir',
       'History', 'Horror', 'Music', 'Musical', 'Mystery', 'Romance', 'Sci_Fi',
       'Sport', 'Thriller', 'War', 'Western', 'Approved', 'G', 'GP', 'M',
       'M_PG', 'NC_17', 'Not_Rated', 'PG', 'PG_13', 'R', 'TV_MA', 'Unrated',
       'Top_Production_Company', 'Top_Director', 'Top_Writer', 'Domestic',
       'International', 'English_Language', 'Other_Language', 'Oscars_Won',
       'Oscars_Nominated', 'Wins', 'Nominations', 'Descr_Sentiment',
       'Tagline_Sentiment', 'Female_Lead', 'starpower'],
      dtype='object')</preformat>
        </boxed-text>
      </sec>
      <sec id="cbcb8898-nb-3" specific-use="notebook-content">
        <code language="python">from sklearn.preprocessing import StandardScaler

# scaling the numeric columns
cols_to_scale = ['Year', 'Runtime', 'Metascore', 'IMDB_Votes',
                 'TMDB_Rating', 'Vote_Count', 'Month', 'Day', 'Oscars_Won',
                 'Oscars_Nominated', 'Wins', 'Nominations',
                 'Descr_Sentiment', 'Tagline_Sentiment', 'starpower']
# loading in the StandardScaler
scaler = StandardScaler()
movies_df[cols_to_scale] = scaler.fit_transform(movies_df[cols_to_scale])</code>
      </sec>
      <sec id="cell-8baed294-nb-3" specific-use="notebook-content">
        <code language="python">from statsmodels.stats.outliers_influence import variance_inflation_factor
import pandas as pd

# checking for multicollinearity using VIF
X = movies_df.drop(columns=["Female_Lead"])
X = X.select_dtypes(include=[float, int])

vif_data = pd.DataFrame()
vif_data["feature"] = X.columns
vif_data["VIF"] = [variance_inflation_factor(X.values, i) for i in range(X.shape[1])]

print(vif_data[vif_data['VIF'] &gt; 10])  # check for high VIF values</code>
        <boxed-text>
          <preformat>             feature           VIF
7            Revenue  1.159141e+01
34          Approved  5.883213e+12
35                 G  3.336000e+14
36                GP  4.094181e+13
37                 M  3.216857e+14
38              M_PG  1.916425e+14
39             NC_17  9.191020e+13
40         Not_Rated  1.047349e+14
41                PG  1.047349e+14
42             PG_13  6.004800e+14
43                 R  8.417943e+13
44             TV_MA  2.038750e+12
45           Unrated  5.700759e+13
49          Domestic  2.251800e+15
50     International  9.007199e+15
51  English_Language  4.094181e+14
52    Other_Language  2.094698e+14</preformat>
        </boxed-text>
      </sec>
      <sec id="c192b67c-nb-3" specific-use="notebook-content">
        <code language="python">import statsmodels.formula.api as smf
import statsmodels.api as sm

# didn't include Other_Language, International, Musical, and Approved (one from each of the categorical variables)
# THIS IS THE VERSION THAT INCLUDES THE EX-POST VARIABLES
# formula = (
#     "Female_Lead ~ Year + Runtime + Budget + Metascore + IMDB_Votes + TMDB_Rating + Vote_Count + Month + Day + "
#     "Action + Adventure + Animation + Biography + Comedy + Crime + Documentary + Drama + Family + Fantasy + "
#     "Film_Noir + History + Horror + Music + Mystery + Romance + Sci_Fi + Sport + Thriller + War + Western + "
#     "G + GP + M + M_PG + NC_17 + Not_Rated + PG + PG_13 + R + TV_MA + Unrated + "
#     "Top_Production_Company + Top_Director + Top_Writer + Domestic + English_Language + "
#     "Oscars_Won + Oscars_Nominated + Wins + Nominations + Descr_Sentiment + Tagline_Sentiment + starpower"
# )
# THIS IS THE VERSION THAT DOES NOT INCLUDE THE EX-POST VARIABLES


# formula for the propensity score model
formula = (
    "Female_Lead ~ Year + Runtime + Budget + Month + Day + "
    "Action + Adventure + Animation + Biography + Comedy + Crime + Documentary + Drama + Family + Fantasy + "
    "Film_Noir + History + Horror + Music + Mystery + Romance + Sci_Fi + Sport + Thriller + War + Western + "
    "G + GP + M + M_PG + NC_17 + Not_Rated + PG + PG_13 + R + TV_MA + Unrated + "
    "Top_Production_Company + Top_Director + Top_Writer + Domestic + English_Language + "
    "Descr_Sentiment + Tagline_Sentiment + starpower"
)
# fitting the propensity score model
prop_model = smf.glm(
    formula=formula,
    data=movies_df,
    family=sm.families.Binomial()
).fit()

# looking at the summary of the model
print(prop_model.summary())</code>
        <boxed-text>
          <preformat>                 Generalized Linear Model Regression Results                  
==============================================================================
Dep. Variable:            Female_Lead   No. Observations:                 2816
Model:                            GLM   Df Residuals:                     2770
Model Family:                Binomial   Df Model:                           45
Link Function:                  Logit   Scale:                          1.0000
Method:                          IRLS   Log-Likelihood:                -1175.3
Date:                Fri, 08 Aug 2025   Deviance:                       2350.6
Time:                        12:29:34   Pearson chi2:                 2.76e+03
No. Iterations:                    22   Pseudo R-squ. (CS):            0.08372
Covariance Type:            nonrobust                                         
==========================================================================================
                             coef    std err          z      P&gt;|z|      [0.025      0.975]
------------------------------------------------------------------------------------------
Intercept                 -0.4660      1.045     -0.446      0.656      -2.515       1.583
Year                       0.1972      0.067      2.949      0.003       0.066       0.328
Runtime                   -0.2203      0.077     -2.848      0.004      -0.372      -0.069
Budget                 -2.039e-09   1.72e-09     -1.182      0.237   -5.42e-09    1.34e-09
Month                     -0.0591      0.053     -1.121      0.262      -0.162       0.044
Day                        0.0402      0.053      0.764      0.445      -0.063       0.143
Action                    -0.7952      0.179     -4.433      0.000      -1.147      -0.444
Adventure                 -0.1393      0.187     -0.744      0.457      -0.506       0.228
Animation                 -0.8303      0.327     -2.537      0.011      -1.472      -0.189
Biography                 -0.2394      0.245     -0.977      0.329      -0.720       0.241
Comedy                    -0.0878      0.158     -0.555      0.579      -0.398       0.222
Crime                     -0.5394      0.180     -2.995      0.003      -0.892      -0.186
Documentary              -22.0020   4.34e+04     -0.001      1.000    -8.5e+04    8.49e+04
Drama                     -0.0880      0.152     -0.580      0.562      -0.385       0.209
Family                     0.1246      0.262      0.475      0.635      -0.389       0.639
Fantasy                   -0.4359      0.197     -2.209      0.027      -0.823      -0.049
Film_Noir                -21.9688   3.47e+04     -0.001      0.999    -6.8e+04     6.8e+04
History                   -0.4222      0.385     -1.095      0.273      -1.178       0.333
Horror                     0.6161      0.194      3.174      0.002       0.236       0.997
Music                      0.1461      0.299      0.489      0.625      -0.439       0.732
Mystery                    0.0334      0.175      0.191      0.849      -0.310       0.377
Romance                    0.4933      0.163      3.027      0.002       0.174       0.813
Sci_Fi                    -0.4243      0.222     -1.908      0.056      -0.860       0.012
Sport                     -2.7374      1.018     -2.690      0.007      -4.732      -0.743
Thriller                  -0.0732      0.172     -0.426      0.670      -0.410       0.264
War                       -0.6082      0.558     -1.090      0.276      -1.702       0.486
Western                   -1.5042      1.042     -1.444      0.149      -3.546       0.538
G                         -0.4983      0.658     -0.757      0.449      -1.788       0.791
GP                       -22.8200    4.4e+04     -0.001      1.000   -8.62e+04    8.62e+04
M                        -21.0696   7.85e+04     -0.000      1.000   -1.54e+05    1.54e+05
M_PG                     -21.4233   7.91e+04     -0.000      1.000   -1.55e+05    1.55e+05
NC_17                     -1.3790      1.253     -1.100      0.271      -3.835       1.077
Not_Rated                 -2.8195      1.231     -2.291      0.022      -5.232      -0.407
PG                        -1.1203      0.613     -1.826      0.068      -2.323       0.082
PG_13                     -0.9901      0.620     -1.597      0.110      -2.205       0.225
R                         -1.3660      0.616     -2.217      0.027      -2.574      -0.158
TV_MA                    -23.3471   4.46e+04     -0.001      1.000   -8.75e+04    8.74e+04
Unrated                  -23.7567   4.58e+04     -0.001      1.000   -8.97e+04    8.97e+04
Top_Production_Company    -0.0283      0.113     -0.250      0.803      -0.251       0.194
Top_Director              -0.5287      0.242     -2.186      0.029      -1.003      -0.055
Top_Writer                 0.0518      0.314      0.165      0.869      -0.564       0.668
Domestic                   0.1779      0.134      1.328      0.184      -0.085       0.440
English_Language           0.4508      0.802      0.562      0.574      -1.122       2.024
Descr_Sentiment            0.1221      0.054      2.252      0.024       0.016       0.228
Tagline_Sentiment          0.0078      0.054      0.144      0.885      -0.098       0.114
starpower                  0.1540      0.058      2.671      0.008       0.041       0.267
==========================================================================================</preformat>
        </boxed-text>
      </sec>
      <sec id="e30e7d6a-nb-3" specific-use="notebook-content">
        <code language="python"># predicting the propensity scores
movies_df['ps'] = prop_model.predict(movies_df)
movies_df</code>
        <boxed-text>
          <table-wrap>
            <table border="1">
              <thead>
                <tr style="text-align: right;">
                  <th/>
                  <th>Title</th>
                  <th>Year</th>
                  <th>Runtime</th>
                  <th>IMDB_Rating</th>
                  <th>Metascore</th>
                  <th>IMDB_Votes</th>
                  <th>Box Office</th>
                  <th>Budget</th>
                  <th>Revenue</th>
                  <th>TMDB_Rating</th>
                  <th>...</th>
                  <th>Other_Language</th>
                  <th>Oscars_Won</th>
                  <th>Oscars_Nominated</th>
                  <th>Wins</th>
                  <th>Nominations</th>
                  <th>Descr_Sentiment</th>
                  <th>Tagline_Sentiment</th>
                  <th>Female_Lead</th>
                  <th>starpower</th>
                  <th>ps</th>
                </tr>
              </thead>
              <tbody>
                <tr>
                  <td>0</td>
                  <td>Four Brothers</td>
                  <td>0.019478</td>
                  <td>-0.208373</td>
                  <td>6.8</td>
                  <td>-0.532970</td>
                  <td>-0.200965</td>
                  <td>74494381.0</td>
                  <td>45000000</td>
                  <td>92374674</td>
                  <td>0.091639</td>
                  <td>...</td>
                  <td>0</td>
                  <td>-0.260419</td>
                  <td>-0.345799</td>
                  <td>-0.236806</td>
                  <td>-0.350630</td>
                  <td>-1.049520</td>
                  <td>-1.231476</td>
                  <td>0</td>
                  <td>0.042814</td>
                  <td>0.052002</td>
                </tr>
                <tr>
                  <td>1</td>
                  <td>The Adventures of Tintin</td>
                  <td>0.445226</td>
                  <td>-0.305466</td>
                  <td>7.3</td>
                  <td>0.551290</td>
                  <td>0.097656</td>
                  <td>77591831.0</td>
                  <td>130000000</td>
                  <td>373993951</td>
                  <td>0.236929</td>
                  <td>...</td>
                  <td>0</td>
                  <td>-0.260419</td>
                  <td>0.603295</td>
                  <td>0.419577</td>
                  <td>0.843293</td>
                  <td>-1.049520</td>
                  <td>0.812034</td>
                  <td>0</td>
                  <td>1.185592</td>
                  <td>0.027380</td>
                </tr>
                <tr>
                  <td>2</td>
                  <td>Green Lantern</td>
                  <td>0.445226</td>
                  <td>0.034358</td>
                  <td>5.5</td>
                  <td>-1.103633</td>
                  <td>0.288967</td>
                  <td>116601172.0</td>
                  <td>200000000</td>
                  <td>219851172</td>
                  <td>-2.158281</td>
                  <td>...</td>
                  <td>0</td>
                  <td>-0.260419</td>
                  <td>-0.345799</td>
                  <td>-0.314028</td>
                  <td>-0.416959</td>
                  <td>0.952816</td>
                  <td>0.812034</td>
                  <td>0</td>
                  <td>-0.528576</td>
                  <td>0.077131</td>
                </tr>
                <tr>
                  <td>3</td>
                  <td>The Beastmaster</td>
                  <td>-1.612556</td>
                  <td>0.228543</td>
                  <td>6.2</td>
                  <td>-2.302025</td>
                  <td>-0.688899</td>
                  <td>14056528.0</td>
                  <td>8000000</td>
                  <td>14056528</td>
                  <td>-0.600219</td>
                  <td>...</td>
                  <td>0</td>
                  <td>-0.260419</td>
                  <td>-0.345799</td>
                  <td>-0.391250</td>
                  <td>-0.505398</td>
                  <td>0.952816</td>
                  <td>0.812034</td>
                  <td>0</td>
                  <td>-1.099965</td>
                  <td>0.050311</td>
                </tr>
                <tr>
                  <td>4</td>
                  <td>Kong: Skull Island</td>
                  <td>0.870974</td>
                  <td>0.228543</td>
                  <td>6.7</td>
                  <td>0.208892</td>
                  <td>0.493368</td>
                  <td>168052812.0</td>
                  <td>185000000</td>
                  <td>566652812</td>
                  <td>-0.258441</td>
                  <td>...</td>
                  <td>0</td>
                  <td>-0.260419</td>
                  <td>0.603295</td>
                  <td>-0.391250</td>
                  <td>-0.063204</td>
                  <td>0.952816</td>
                  <td>0.812034</td>
                  <td>0</td>
                  <td>0.614203</td>
                  <td>0.099703</td>
                </tr>
                <tr>
                  <td>...</td>
                  <td>...</td>
                  <td>...</td>
                  <td>...</td>
                  <td>...</td>
                  <td>...</td>
                  <td>...</td>
                  <td>...</td>
                  <td>...</td>
                  <td>...</td>
                  <td>...</td>
                  <td>...</td>
                  <td>...</td>
                  <td>...</td>
                  <td>...</td>
                  <td>...</td>
                  <td>...</td>
                  <td>...</td>
                  <td>...</td>
                  <td>...</td>
                  <td>...</td>
                  <td>...</td>
                </tr>
                <tr>
                  <td>2811</td>
                  <td>ATL</td>
                  <td>0.090436</td>
                  <td>-0.402558</td>
                  <td>6.2</td>
                  <td>0.265958</td>
                  <td>-0.736628</td>
                  <td>21170563.0</td>
                  <td>20000000</td>
                  <td>21170563</td>
                  <td>0.198185</td>
                  <td>...</td>
                  <td>0</td>
                  <td>-0.260419</td>
                  <td>-0.345799</td>
                  <td>-0.429860</td>
                  <td>-0.394849</td>
                  <td>0.952816</td>
                  <td>0.812034</td>
                  <td>0</td>
                  <td>-1.099965</td>
                  <td>0.195551</td>
                </tr>
                <tr>
                  <td>2812</td>
                  <td>Like a Boss</td>
                  <td>1.083848</td>
                  <td>-1.470576</td>
                  <td>4.7</td>
                  <td>-1.446031</td>
                  <td>-0.725476</td>
                  <td>22169514.0</td>
                  <td>29000000</td>
                  <td>26900000</td>
                  <td>-0.683241</td>
                  <td>...</td>
                  <td>0</td>
                  <td>-0.260419</td>
                  <td>-0.345799</td>
                  <td>-0.391250</td>
                  <td>-0.439069</td>
                  <td>0.952816</td>
                  <td>-1.231476</td>
                  <td>1</td>
                  <td>0.614203</td>
                  <td>0.361287</td>
                </tr>
                <tr>
                  <td>2813</td>
                  <td>Enemy Mine</td>
                  <td>-1.399682</td>
                  <td>-0.256919</td>
                  <td>6.8</td>
                  <td>0.037693</td>
                  <td>-0.592679</td>
                  <td>12303411.0</td>
                  <td>40000000</td>
                  <td>12300000</td>
                  <td>0.230010</td>
                  <td>...</td>
                  <td>0</td>
                  <td>-0.260419</td>
                  <td>-0.345799</td>
                  <td>-0.352639</td>
                  <td>-0.372740</td>
                  <td>-1.049520</td>
                  <td>-1.231476</td>
                  <td>0</td>
                  <td>-0.528576</td>
                  <td>0.066314</td>
                </tr>
                <tr>
                  <td>2814</td>
                  <td>Proud Mary</td>
                  <td>0.941932</td>
                  <td>-1.179299</td>
                  <td>5.0</td>
                  <td>-1.331898</td>
                  <td>-0.740903</td>
                  <td>20877013.0</td>
                  <td>14000000</td>
                  <td>21753365</td>
                  <td>-1.707190</td>
                  <td>...</td>
                  <td>0</td>
                  <td>-0.260419</td>
                  <td>-0.345799</td>
                  <td>-0.391250</td>
                  <td>-0.461178</td>
                  <td>-1.049520</td>
                  <td>-1.231476</td>
                  <td>1</td>
                  <td>-1.099965</td>
                  <td>0.080423</td>
                </tr>
                <tr>
                  <td>2815</td>
                  <td>Valmont</td>
                  <td>-1.115850</td>
                  <td>1.150923</td>
                  <td>7.0</td>
                  <td>-0.190572</td>
                  <td>-0.727958</td>
                  <td>1132112.0</td>
                  <td>33000000</td>
                  <td>1132112</td>
                  <td>-0.028745</td>
                  <td>...</td>
                  <td>0</td>
                  <td>-0.260419</td>
                  <td>0.603295</td>
                  <td>-0.314028</td>
                  <td>-0.439069</td>
                  <td>0.952816</td>
                  <td>0.812034</td>
                  <td>0</td>
                  <td>1.185592</td>
                  <td>0.217974</td>
                </tr>
              </tbody>
            </table>
          </table-wrap>
        </boxed-text>
      </sec>
      <sec id="cell-0a83dd61-nb-3" specific-use="notebook-content">
        <p>The closer to 0 indicates a lower likelihood of the movie having a
female lead, while closer to 1 indicates a higher likelihood of the film
having a female lead.</p>
      </sec>
      <sec id="cell-11eed5c9-nb-3" specific-use="notebook-content">
        <code language="python"># creating a new columns for the matches
movies_df['match'] = np.nan

# matching movies on propensity scores
for i in range(len(movies_df)):
    cur_T = movies_df.loc[i, "Female_Lead"]
    cur_ps = movies_df.loc[i, "ps"]
    
    # filter out current movie
    other_df = movies_df[movies_df["Female_Lead"] != cur_T].copy()
    
    # calculate absolute difference
    other_df['ps_dist'] = (other_df['ps'] - cur_ps).abs()
    
    # find the index of the row with minimal ps_dist
    match_id = other_df['ps_dist'].idxmin()
    
    # assign match_id to the 'match' column at position i
    movies_df.loc[i, 'match'] = match_id</code>
      </sec>
      <sec id="cell-15984fe7-nb-3" specific-use="notebook-content">
        <code language="python">#movies_df[1265:1275]</code>
      </sec>
      <sec id="cell-812ed98e-nb-3" specific-use="notebook-content">
        <code language="python"># looking at matched movies
movie = movies_df.iloc[621]
match_index = int(movie['match'])
matched_movie = movies_df.iloc[match_index]

print("Original movie:")
print(movie[['Title', 'Female_Lead', 'ps']])
print("\nMatched movie:")
print(matched_movie[['Title', 'Female_Lead', 'ps']])</code>
        <boxed-text>
          <preformat>Original movie:
Title          2 Fast 2 Furious
Female_Lead                   0
ps                     0.066959
Name: 621, dtype: object

Matched movie:
Title          Kill Bill: Vol. 2
Female_Lead                    1
ps                      0.066924
Name: 966, dtype: object</preformat>
        </boxed-text>
      </sec>
      <sec id="d9c30b2e-nb-3" specific-use="notebook-content">
        <sec id="looking-at-box-office-as-the-outcome-variable-nb-3">
          <title>Looking at Box Office as the Outcome Variable</title>
        </sec>
        <sec id="cell-975b9a56-nb-3" specific-use="notebook-content">
          <code language="python"># calculating the means for Box Office
movies_df = movies_df.rename(columns={'Box Office': 'Box_Office'})
movies_df = movies_df.reset_index().rename(columns={'index': 'movie_idx'})

female_lead_df = movies_df[movies_df['Female_Lead'] == 1]

matched_df = female_lead_df.merge(movies_df, left_on='match', right_on='movie_idx', how='left', suffixes=('.female', '.male'))
print(matched_df.head())

mean_fem = matched_df['Box_Office.female'].mean()
mean_male = matched_df['Box_Office.male'].mean()

print(f"Mean Box Office for Female Lead: {mean_fem}")
print(f"Mean Box Office for Male Lead: {mean_male}")</code>
          <boxed-text>
            <preformat>   movie_idx.female                  Title.female  Year.female  \
0                11  Maleficent: Mistress of Evil     1.012890   
1                17                       Species    -0.690102   
2                18            A Cinderella Story    -0.051480   
3                21   The Hunchback of Notre Dame    -0.619144   
4                29               Double Jeopardy    -0.406270   

   Runtime.female  IMDB_Rating.female  Metascore.female  IMDB_Votes.female  \
0        0.277090                 6.6         -0.875368          -0.333726   
1       -0.256919                 5.9         -0.532970          -0.468345   
2       -0.888021                 5.9         -1.902561          -0.435065   
3       -1.082206                 7.0          0.893687          -0.149703   
4       -0.402558                 6.5         -0.989500          -0.429025   

   Box_Office.female  Budget.female  Revenue.female  ...  Oscars_Won.male  \
0        113929605.0      185000000       491730089  ...        -0.260419   
1         60074103.0       35000000       113400000  ...        -0.260419   
2         51438175.0       19000000        70067909  ...        -0.260419   
3        100138851.0      100000000       325300000  ...         0.741411   
4        116741558.0       70000000       177841558  ...        -0.260419   

   Oscars_Nominated.male  Wins.male  Nominations.male  Descr_Sentiment.male  \
0              -0.345799  -0.275417         -0.328520             -1.049520   
1              -0.345799  -0.429860         -0.505398              0.952816   
2              -0.345799  -0.429860         -0.439069             -1.049520   
3              -0.345799   3.045111          1.683461             -1.049520   
4              -0.345799  -0.429860         -0.372740              0.952816   

   Tagline_Sentiment.male  Female_Lead.male  starpower.male   ps.male  \
0                0.812034                 0       -0.528576  0.208838   
1               -1.231476                 0       -0.528576  0.120529   
2               -1.231476                 0        0.614203  0.432279   
3                0.812034                 0        0.614203  0.288741   
4                0.812034                 0        1.185592  0.146895   

   match.male  
0        11.0  
1        17.0  
2       418.0  
3        21.0  
4        29.0  

[5 rows x 130 columns]
Mean Box Office for Female Lead: 62708871.36065574
Mean Box Office for Male Lead: 61076707.44877049</preformat>
          </boxed-text>
        </sec>
        <sec id="ca1184b5-nb-3" specific-use="notebook-content">
</sec>
        <sec id="looking-at-imdb-rating-as-the-outcome-variable-nb-3">
          <title>Looking at IMDb Rating as the Outcome Variable</title>
        </sec>
        <sec id="f44506b7-nb-3" specific-use="notebook-content">
          <code language="python"># calculating the means for IMDb Ratings
mean_fem = matched_df['IMDB_Rating.female'].mean()
mean_male = matched_df['IMDB_Rating.male'].mean()

print(f"Mean IMDb Rating for Female Lead: {mean_fem}")
print(f"Mean IMDb Rating for Male Lead: {mean_male}")</code>
          <boxed-text>
            <preformat>Mean IMDb Rating for Female Lead: 6.329303278688524
Mean IMDb Rating for Male Lead: 6.600819672131147</preformat>
          </boxed-text>
        </sec>
      </sec>
    </body>
    <back>
</back>
  </sub-article>
  <sub-article article-type="notebook" id="nb-12-nb-4">
    <front-stub>
      <title-group>
        <article-title>Manuactured Variables</article-title>
      </title-group>
    </front-stub>
    <body>
      <sec id="cell-4ad14931-nb-4" specific-use="notebook-content">
        <sec id="performing-sentiment-analysis-on-description-tagline-and-overview-nb-4">
          <title>Performing Sentiment Analysis on Description, Tagline, and
  Overview</title>
        </sec>
        <sec id="cell-32e1727a-nb-4" specific-use="notebook-content">
          <code language="python">from transformers import pipeline

# importing the pretrained model for sentiment analysis
classifier = pipeline(
    "sentiment-analysis", 
    model="distilbert-base-uncased-finetuned-sst-2-english",
    truncation=True
    )</code>
          <boxed-text>
            <preformat>Device set to use cpu</preformat>
          </boxed-text>
        </sec>
        <sec id="dcfdd68f-nb-4" specific-use="notebook-content">
          <code language="python">import pandas as pd
import numpy as np

# reading in the combined data
movies_df = pd.read_csv("../data/output_data/clean_movies.csv")

# getting the sentiment of the description
movies_df["Descr_Sentiment"] = movies_df["Description"].apply(lambda x: classifier(x)[0]["label"])</code>
        </sec>
        <sec id="cell-95dbfeb0-nb-4" specific-use="notebook-content">
          <code language="python"># getting the sentiment of the overview
movies_df["Tagline_Sentiment"] = movies_df["Tagline"].apply(lambda x: classifier(x)[0]["label"])</code>
        </sec>
        <sec id="cell-690dcd80-nb-4" specific-use="notebook-content">
          <code language="python"># converting the neg/pos to label 0/1
movies_df["Descr_Sentiment"] = movies_df["Descr_Sentiment"].replace({"NEGATIVE": 0, "POSITIVE": 1})
movies_df["Tagline_Sentiment"] = movies_df["Tagline_Sentiment"].replace({"NEGATIVE": 0, "POSITIVE": 1})</code>
          <boxed-text>
            <preformat>/var/folders/f7/px3ynpyn7l3g5j59yyvbggrw0000gn/T/ipykernel_49866/2660690932.py:2: FutureWarning: Downcasting behavior in `replace` is deprecated and will be removed in a future version. To retain the old behavior, explicitly call `result.infer_objects(copy=False)`. To opt-in to the future behavior, set `pd.set_option('future.no_silent_downcasting', True)`
  movies_df["Descr_Sentiment"] = movies_df["Descr_Sentiment"].replace({"NEGATIVE": 0, "POSITIVE": 1})
/var/folders/f7/px3ynpyn7l3g5j59yyvbggrw0000gn/T/ipykernel_49866/2660690932.py:3: FutureWarning: Downcasting behavior in `replace` is deprecated and will be removed in a future version. To retain the old behavior, explicitly call `result.infer_objects(copy=False)`. To opt-in to the future behavior, set `pd.set_option('future.no_silent_downcasting', True)`
  movies_df["Tagline_Sentiment"] = movies_df["Tagline_Sentiment"].replace({"NEGATIVE": 0, "POSITIVE": 1})</preformat>
          </boxed-text>
        </sec>
        <sec id="cell-89dc0bcb-nb-4" specific-use="notebook-content">
          <code language="python"># dropping the original columns
movies_df = movies_df.drop(columns=["Tagline", "Description"])</code>
        </sec>
        <sec id="f8a63b6d-nb-4" specific-use="notebook-content">
          <code language="python"># exporting the dataset with the sentiment analysis
movies_df.to_csv("../data/output_data/clean_movies_sent.csv", index=False)</code>
        </sec>
        <sec id="cell-3843dd59-nb-4" specific-use="notebook-content">
</sec>
        <sec id="creating-the-starpower-variable-nb-4">
          <title>Creating the Starpower Variable</title>
        </sec>
        <sec id="d8c18a23-nb-4" specific-use="notebook-content">
          <code language="python">import pandas as pd
import numpy as np

# reading in the combined data with sentiment analysis
movies_df = pd.read_csv("../data/output_data/clean_movies_sent.csv")</code>
        </sec>
        <sec id="cell-8f095867-nb-4" specific-use="notebook-content">
          <code language="python"># loading in the list of A-list and B-list actors/actresses 
a_list_actors_df = pd.read_csv("../data/input_data/a_list_actors.csv")
a_list_actresses_df = pd.read_csv("../data/input_data/a_list_actresses.csv")
b_list_df = pd.read_csv("../data/input_data/b_list.csv")

# taking just the names from the dataframes
a_list_actors = a_list_actors_df['Name'].tolist()
a_list_actors = pd.DataFrame(a_list_actors, columns=['Name'])

a_list_actresses = a_list_actresses_df['Name'].tolist()
a_list_actresses = pd.DataFrame(a_list_actresses, columns=['Name'])

b_list = b_list_df['Name'].tolist()
b_list = pd.DataFrame(b_list, columns=['Name'])

# combining the A-list actors and actresses into one dataframe
a_list = pd.concat([a_list_actors, a_list_actresses], ignore_index=True)

print(a_list.head(5))
print(b_list.head(5))

num_a_list = len(a_list)
num_b_list = len(b_list)

print(f'Number of A-listers: {num_a_list}')
print(f'Number of b-listers: {num_b_list}')</code>
          <boxed-text>
            <preformat>              Name
0        Al Pacino
1  Tommy Lee Jones
2    Harrison Ford
3   Robert De Niro
4    Kevin Costner
               Name
0      Ansel Elgort
1       Wes Bentley
2  Chiwetel Ejiofor
3        Karl Urban
4   Britt Robertson
Number of A-listers: 200
Number of b-listers: 376</preformat>
          </boxed-text>
        </sec>
        <sec id="cell-09f1749b-nb-4" specific-use="notebook-content">
          <code language="python"># Creating the variable to calculate the starpower metric

# splitting to get all four actors/actresses into separate columns
if movies_df['Actors'].notna().any():
    actors_split = movies_df['Actors'].str.split(',', expand=True)
    movies_df['actor1'] = actors_split[0].str.strip()
    movies_df['actor2'] = actors_split[1].str.strip()
    movies_df['actor3'] = actors_split[2].str.strip()
else:
    print("The 'Actors' column is empty or missing.")

# creating the metric column
movies_df['starpower'] = 0

# Check if the first actor is in the a-list
movies_df.loc[movies_df['actor1'].isin(a_list['Name'].values), 'starpower'] += 2
movies_df.loc[movies_df['actor2'].isin(a_list['Name'].values), 'starpower'] += 2
movies_df.loc[movies_df['actor3'].isin(a_list['Name'].values), 'starpower'] += 2

movies_df.loc[movies_df['actor1'].isin(b_list['Name'].values), 'starpower'] += 1
movies_df.loc[movies_df['actor2'].isin(b_list['Name'].values), 'starpower'] += 1
movies_df.loc[movies_df['actor3'].isin(b_list['Name'].values), 'starpower'] += 1

# making it an average value
movies_df['starpower'] = movies_df['starpower'] / 3

# checking the new variable
print(movies_df[['actor1', 'actor2', 'actor3', 'starpower']].head(10))

# dropping the actor columns
movies_df = movies_df.drop(columns=["actor1", "actor2", "actor3"])</code>
          <boxed-text>
            <preformat>           actor1             actor2           actor3  starpower
0   Mark Wahlberg      Tyrese Gibson       André 3000   0.666667
1      Jamie Bell        Andy Serkis     Daniel Craig   1.333333
2   Ryan Reynolds       Blake Lively  Peter Sarsgaard   0.333333
3     Marc Singer      Tanya Roberts         Rip Torn   0.000000
4  Tom Hiddleston  Samuel L. Jackson      Brie Larson   1.000000
5   Jeremy Renner           Ed Helms     Jake Johnson   0.000000
6   Frankie Muniz       Amanda Bynes    Paul Giamatti   1.000000
7      Ben Barnes     Skandar Keynes   Georgie Henley   0.000000
8   Jason Bateman        Charlie Day   Jason Sudeikis   1.000000
9      Jack Black  Ana de la Reguera   Héctor Jiménez   0.333333</preformat>
          </boxed-text>
        </sec>
        <sec id="adc7fff3-nb-4" specific-use="notebook-content">
          <code language="python"># exporting dataset with starpower metric
movies_df.to_csv("../data/output_data/clean_movies_sent_star.csv", index=False)</code>
        </sec>
        <sec id="f878a880-nb-4" specific-use="notebook-content">
</sec>
        <sec id="creating-the-female-actress-lead-variable-nb-4">
          <title>Creating the Female Actress Lead Variable</title>
        </sec>
        <sec id="a2e6e662-nb-4" specific-use="notebook-content">
          <code language="python">import pandas as pd
import numpy as np

# reading in combined data with sentiment analysis
movies_df = pd.read_csv("../data/output_data/clean_movies_sent_star.csv")</code>
        </sec>
        <sec id="cell-47e84c48-nb-4" specific-use="notebook-content">
          <code language="python"># checking how accurate the first listed actor/actress is in terms of being the star or main character
first_actors = movies_df['Actors'].str.split(',').str[0].str.strip()
print(first_actors.head(20))

print(movies_df['Title'].head(20))</code>
          <boxed-text>
            <preformat>0          Mark Wahlberg
1             Jamie Bell
2          Ryan Reynolds
3            Marc Singer
4         Tom Hiddleston
5          Jeremy Renner
6          Frankie Muniz
7             Ben Barnes
8          Jason Bateman
9             Jack Black
10            Chris Pine
11        Angelina Jolie
12          Sam Rockwell
13            Nick Nolte
14        Timothy Dalton
15             Al Pacino
16        Clint Eastwood
17    Natasha Henstridge
18           Hilary Duff
19       Jake Gyllenhaal
Name: Actors, dtype: object
0                                Four Brothers
1                     The Adventures of Tintin
2                                Green Lantern
3                              The Beastmaster
4                           Kong: Skull Island
5                                          Tag
6                                 Big Fat Liar
7     The Chronicles of Narnia: Prince Caspian
8                              Horrible Bosses
9                                  Nacho Libre
10                     Star Trek Into Darkness
11                Maleficent: Mistress of Evil
12                                The Bad Guys
13                                     48 Hrs.
14                        The Living Daylights
15                               Carlito's Way
16                            Heartbreak Ridge
17                                     Species
18                          A Cinderella Story
19                                  Demolition
Name: Title, dtype: object</preformat>
          </boxed-text>
        </sec>
        <sec id="f5cfec6d-nb-4" specific-use="notebook-content">
          <code language="python"># getting the female actresses names from excel file

# opening the file
female_df = pd.read_excel("../data/input_data/female_actresses.xlsx")
female_df = female_df.rename(columns={'A': 'Name'})

# splitting to get the names only
female_df['Name'] = female_df['Name'].str.split(' born').str[0].str.split(r'\d').str[0].str.strip()

# deleting the rows that are just the letter headers
female_df = female_df[~female_df['Name'].isin(list('ABCDEFGHIJKLMNOPQRSTUVWXYZ'))]

num_actresses = len(female_df)
print(f'There are {num_actresses} actresses in the list')</code>
          <boxed-text>
            <preformat>There are 2452 actresses in the list</preformat>
          </boxed-text>
        </sec>
        <sec id="cell-7e94a27b-nb-4" specific-use="notebook-content">
          <code language="python"># Creating the variable to indicate if first actor is female
first_actors = movies_df['Actors'].str.split(',').str[0].str.strip()
movies_df['First_Actor'] = first_actors

# Check if the first actor is in the female name list
movies_df['Female_Lead'] = movies_df['First_Actor'].apply(lambda x: int(any(name in x for name in female_df['Name'])))

# checking the new variable
print(movies_df[['Title', 'First_Actor', 'Female_Lead']].head(10))
print(movies_df[['Title', 'First_Actor', 'Female_Lead']].tail(10))

# dropping the first_Actor column
movies_df = movies_df.drop(columns=["First_Actor"])</code>
          <boxed-text>
            <preformat>                                      Title     First_Actor  Female_Lead
0                             Four Brothers   Mark Wahlberg            0
1                  The Adventures of Tintin      Jamie Bell            0
2                             Green Lantern   Ryan Reynolds            0
3                           The Beastmaster     Marc Singer            0
4                        Kong: Skull Island  Tom Hiddleston            0
5                                       Tag   Jeremy Renner            0
6                              Big Fat Liar   Frankie Muniz            0
7  The Chronicles of Narnia: Prince Caspian      Ben Barnes            0
8                           Horrible Bosses   Jason Bateman            0
9                               Nacho Libre      Jack Black            0
              Title         First_Actor  Female_Lead
2806     The Family      Robert De Niro            0
2807      The Shack     Sam Worthington            0
2808  The Dead Zone  Christopher Walken            0
2809        The Ref         Denis Leary            0
2810        Flyboys        James Franco            0
2811            ATL   Tip 'T.I.' Harris            0
2812    Like a Boss     Tiffany Haddish            1
2813     Enemy Mine        Dennis Quaid            0
2814     Proud Mary    Taraji P. Henson            1
2815        Valmont         Colin Firth            0</preformat>
          </boxed-text>
        </sec>
        <sec id="d0d0f60d-nb-4" specific-use="notebook-content">
          <code language="python"># count of the split
female_lead_count = movies_df['Female_Lead'].value_counts()
print(female_lead_count)</code>
          <boxed-text>
            <preformat>Female_Lead
0    2328
1     488
Name: count, dtype: int64</preformat>
          </boxed-text>
        </sec>
        <sec id="cell-60497a4f-nb-4" specific-use="notebook-content">
          <code language="python">movies_df.to_csv("../data/output_data/clean_movies_sent_fem_star.csv", index=False)</code>
        </sec>
      </sec>
    </body>
    <back>
</back>
  </sub-article>
</article>
